diff --git a/src/pm-toolkit/src/domains/projects/dashboard/columns.ts b/src/pm-toolkit/src/domains/projects/dashboard/columns.ts
index c9da177..f1f85cd 100644
--- a/src/pm-toolkit/src/domains/projects/dashboard/columns.ts
+++ b/src/pm-toolkit/src/domains/projects/dashboard/columns.ts
@@ -2,7 +2,7 @@ import {
   EXPECTED_PROFIT_PERCENTAGE,
   MAX_ADVANCE_PERCENTAGE,
 } from "../../../constants";
-import * as GF from "./field-functions";
+import * as GF from "./transform-functions";
 import { ProjectColumn, ProjectContext } from "./types";
 
 export const DASHBOARD_KEYS = {
@@ -43,14 +43,14 @@ export const DASHBOARD_COLUMNS: ProjectColumn[] = [
   {
     key: DASHBOARD_KEYS.PROJECT_NO,
     label: DASHBOARD_LABELS.PROJECT_NO,
-    valueFn: (ctx: ProjectContext) => GF.getProjectNumberFromRow(ctx.rowData),
+    valueFn: (ctx: ProjectContext) => GF.getProjectNumber(ctx),
     format: "text",
     align: "center",
   },
   {
     key: DASHBOARD_KEYS.CLIENT_NAME,
     label: DASHBOARD_LABELS.CLIENT_NAME,
-    valueFn: (ctx: ProjectContext) => GF.getClientNameFromRow(ctx.rowData),
+    valueFn: (ctx: ProjectContext) => GF.getClientName(ctx),
     format: "text",
     align: "left",
   },
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/field-functions.ts b/src/pm-toolkit/src/domains/projects/dashboard/field-functions.ts
deleted file mode 100644
index b7a2a1b..0000000
--- a/src/pm-toolkit/src/domains/projects/dashboard/field-functions.ts
+++ /dev/null
@@ -1,149 +0,0 @@
-import type { ProjectContext } from "./types";
-import * as NR from "../../../constants/named-ranges";
-import { calculateAdvanceMax } from "./utils";
-import { getFieldValue } from "./utils";
-import { toNumber } from "../../../utils/helpers";
-import { EXPECTED_PROFIT_PERCENTAGE } from "../../../constants";
-import { getValueFromNamedOrLegacy } from "./utils";
-import { DASHBOARD_KEYS as KEYS } from "./columns";
-
-export function getProjectNumberFromRow(
-  rowData: Record<string, unknown>
-): string {
-  return String(rowData[KEYS.PROJECT_NO] ?? "N/A");
-}
-
-export function getClientNameFromRow(rowData: Record<string, unknown>): string {
-  return String(rowData[KEYS.CLIENT_NAME] ?? "N/A");
-}
-
-export function getClientName({
-  sheet,
-  namedRangeMap,
-}: ProjectContext): string {
-  const nr = namedRangeMap.get(NR.NR_CLIENT_NAME);
-  if (nr) return nr.getValue();
-
-  const name = sheet.getName();
-  const match = name.trim().match(/^\d+\s+(.+)$/);
-  return match ? match[1] : "N/A";
-}
-
-export function getContractPrice({
-  namedRangeMap,
-  directValueMap,
-}: ProjectContext): number | string {
-  return getValueFromNamedOrLegacy(
-    namedRangeMap,
-    directValueMap,
-    NR.NR_CONTRACT_PRICE,
-    KEYS.CONTRACT_PRICE
-  );
-}
-
-export function getChangeOrders({
-  namedRangeMap,
-  directValueMap,
-}: ProjectContext): number | string {
-  return getValueFromNamedOrLegacy(
-    namedRangeMap,
-    directValueMap,
-    NR.NR_CHANGE_ORDER_TOTAL,
-    KEYS.CHANGE_ORDERS
-  );
-}
-
-export function getExpenses({
-  namedRangeMap,
-  directValueMap,
-}: ProjectContext): number | string {
-  return getValueFromNamedOrLegacy(
-    namedRangeMap,
-    directValueMap,
-    NR.NR_EXPENSE_TOTAL,
-    KEYS.EXPENSES
-  );
-}
-
-export function getMaxAdvance({ rowData }: ProjectContext): number | string {
-  const contractPrice = toNumber(getFieldValue(rowData, KEYS.CONTRACT_PRICE));
-  const changeOrders = toNumber(getFieldValue(rowData, KEYS.CHANGE_ORDERS));
-
-  if (typeof contractPrice !== "number" || typeof changeOrders !== "number")
-    return "N/A";
-
-  return calculateAdvanceMax(contractPrice, changeOrders);
-}
-
-// export function getMaxAdvance({
-//   namedRangeMap,
-//   directValueMap,
-// }: ProjectContext): number | string {
-//   return getValueFromNamedOrLegacy(
-//     namedRangeMap,
-//     directValueMap,
-//     NR.NR_ADVANCE_MAX,
-//     KEYS.MAX_ADVANCE
-//   );
-// }
-
-export function getTotalAdvance({
-  namedRangeMap,
-  directValueMap,
-}: ProjectContext): number | string {
-  return getValueFromNamedOrLegacy(
-    namedRangeMap,
-    directValueMap,
-    NR.NR_ADVANCE_TOTAL,
-    KEYS.TOTAL_ADVANCE
-  );
-}
-
-export function getAdvanceBalance({
-  rowData,
-}: ProjectContext): number | string {
-  const maxAdvance = toNumber(getFieldValue(rowData, KEYS.MAX_ADVANCE));
-  const totalAdvance = toNumber(getFieldValue(rowData, KEYS.TOTAL_ADVANCE));
-
-  if (typeof maxAdvance !== "number" || typeof totalAdvance !== "number")
-    return "N/A";
-
-  return maxAdvance - totalAdvance;
-}
-
-export function getPMAfterAdvance({
-  namedRangeMap,
-  directValueMap,
-}: ProjectContext): number | string {
-  return getValueFromNamedOrLegacy(
-    namedRangeMap,
-    directValueMap,
-    NR.NR_PM_AFTER_ADVANCE,
-    KEYS.PM_AFTER_ADVANCE
-  );
-}
-
-export function getExpectedProfit({
-  rowData,
-}: ProjectContext): number | string {
-  // 20% of (contract price + change orders)
-  const contractPrice = toNumber(getFieldValue(rowData, KEYS.CONTRACT_PRICE));
-  const changeOrders = toNumber(getFieldValue(rowData, KEYS.CHANGE_ORDERS));
-
-  if (typeof contractPrice !== "number" || typeof changeOrders !== "number")
-    return "N/A";
-
-  return ((contractPrice + changeOrders) * EXPECTED_PROFIT_PERCENTAGE) / 100;
-}
-
-export function getProfitAfterAdvance({
-  rowData,
-}: ProjectContext): number | string {
-  const expectedProfit = toNumber(getFieldValue(rowData, KEYS.EXPECTED_PROFIT));
-  const totalAdvance = toNumber(getFieldValue(rowData, KEYS.TOTAL_ADVANCE));
-
-  if (typeof expectedProfit !== "number" || typeof totalAdvance !== "number")
-    return "N/A";
-
-  return expectedProfit - totalAdvance;
-}
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts b/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts
index d1c5025..9ad28f8 100644
--- a/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts
+++ b/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts
@@ -7,11 +7,26 @@ import {
 import { isClosedTabName, startsWithProjectNumber } from "../utils";
 import { DASHBOARD_COLUMNS, DASHBOARD_KEYS } from "./columns";
 import { generateAndStylizeTableFromRows } from "../../../utils";
-import { getProjectRowData } from "./project-data";
+import { extractAllProjectData } from "./data-extraction";
+import { transformExtractedDataToDashboardRows } from "./data-transformation";
+import { setDashboardStatus } from "./utils";
 import { addTimestamp } from "../../../styles";
-import { ProjectDashboardRow } from "./types";
 import { toA1Notation } from "../../../utils/helpers";
 
+const PROJECT_KEYS_TO_SUM = [
+  DASHBOARD_KEYS.CONTRACT_PRICE,
+  DASHBOARD_KEYS.CHANGE_ORDERS,
+  DASHBOARD_KEYS.MAX_ADVANCE,
+  DASHBOARD_KEYS.TOTAL_ADVANCE,
+  DASHBOARD_KEYS.ADVANCE_BALANCE,
+];
+
+const PROJECT_COLOR_KEYS = [
+  DASHBOARD_KEYS.EXPECTED_PROFIT,
+  DASHBOARD_KEYS.ADVANCE_BALANCE,
+  DASHBOARD_KEYS.PM_AFTER_ADVANCE,
+] as const;
+
 export function generateProjectDashboard() {
   try {
     const ss = SpreadsheetApp.getActiveSpreadsheet();
@@ -20,104 +35,96 @@ export function generateProjectDashboard() {
     setDashboardStatus(dashboardSheet, "‚è≥ Generating dashboard...");
 
     const { activeSheets, closedSheets } = getCategorizedProjectSheets(ss);
-    const namedRangesBySheet = groupNamedRangesBySheet(ss.getNamedRanges());
-
-    Logger.log(`Found ${activeSheets.length} active sheets`);
-    Logger.log(`Found ${closedSheets.length} closed sheets`);
+    const namedRangesBySheet = mapNamedRangesBySheet(ss.getNamedRanges());
 
     const startRow = 1;
     const startColActive = 1;
     const startColClosed = DASHBOARD_COLUMNS.length + COL_GAP_BETWEEN_TABLES;
 
-    const PROJECT_KEYS_TO_SUM = [
-      DASHBOARD_KEYS.CONTRACT_PRICE,
-      DASHBOARD_KEYS.CHANGE_ORDERS,
-      DASHBOARD_KEYS.MAX_ADVANCE,
-      DASHBOARD_KEYS.TOTAL_ADVANCE,
-      DASHBOARD_KEYS.ADVANCE_BALANCE,
-    ];
-
-    const PROJECT_COLOR_KEYS = [
-      DASHBOARD_KEYS.EXPECTED_PROFIT,
-      DASHBOARD_KEYS.ADVANCE_BALANCE,
-      DASHBOARD_KEYS.PM_AFTER_ADVANCE,
-    ] as const;
-
-    // üü¢ Active Projects Table
-    setDashboardStatus(dashboardSheet, "üìä Generating Active Projects...");
-    const activeRows: ProjectDashboardRow[] = [];
-    let beginningRow = startRow;
-    let beginningCol = startColActive;
-    for (let i = 0; i < activeSheets.length; i++) {
-      const sheet = activeSheets[i];
-      setDashboardStatus(
-        dashboardSheet,
-        `üìä Generating Active Projects... (${i + 1}/${activeSheets.length})`,
-        toA1Notation(beginningCol, beginningRow)
-      );
-      const row = getProjectRowData(
-        sheet,
-        namedRangesBySheet.get(sheet.getName()) ?? []
-      );
-      activeRows.push(row);
-    }
-
-    generateAndStylizeTableFromRows(
+    const activeTableInfo = generateProjectSection({
       dashboardSheet,
-      activeRows,
-      startRow,
-      startColActive,
-      "üü¢ Active Projects",
-      DASHBOARD_COLUMNS,
-      PROJECT_KEYS_TO_SUM,
-      { colorKeys: PROJECT_COLOR_KEYS }
-    );
-
-    // üî¥ Closed Projects Table
-    const closedRows: ProjectDashboardRow[] = [];
-    beginningRow = startRow;
-    beginningCol = startColClosed;
-    for (let i = 0; i < closedSheets.length; i++) {
-      const sheet = closedSheets[i];
-      setDashboardStatus(
-        dashboardSheet,
-        `üìä Generating Closed Projects... (${i + 1}/${closedSheets.length})`,
-        toA1Notation(beginningCol, beginningRow)
-      );
-      const row = getProjectRowData(
-        sheet,
-        namedRangesBySheet.get(sheet.getName()) ?? []
-      );
-      closedRows.push(row);
-    }
-    generateAndStylizeTableFromRows(
+      projectSheets: activeSheets,
+      namedRangesBySheet,
+      title: "üü¢ Active Projects",
+      startingRow: startRow,
+      startingCol: startColActive,
+    });
+
+    const closedTableInfo = generateProjectSection({
+      dashboardSheet,
+      projectSheets: closedSheets,
+      namedRangesBySheet,
+      title: "üî¥ Closed Projects",
+      startingRow: startRow,
+      startingCol: startColClosed,
+    });
+
+    // ‚úÖ Add timestamp two rows below the end of the active table
+    addTimestamp(
       dashboardSheet,
-      closedRows,
-      startRow,
-      startColClosed,
-      "üî¥ Closed Projects",
-      DASHBOARD_COLUMNS,
-      PROJECT_KEYS_TO_SUM,
-      { colorKeys: PROJECT_COLOR_KEYS }
+      activeTableInfo.endRow + 2,
+      1,
+      "Dashboard last updated:"
     );
 
-    // ‚úÖ Done
-    const numActiveRows = activeRows.length;
-    const extraRows = 3; // title, headers, description
-    const lastRow = startRow + numActiveRows + extraRows + 2;
-    addTimestamp(dashboardSheet, lastRow, 1, "Dashboard last updated:");
-
     SpreadsheetApp.getActiveSpreadsheet().toast(
-      "Dashboard ready ‚úÖ",
+      "Projects Dashboard ready ‚úÖ",
       "Ace Toolkit"
     );
   } catch (err) {
-    Logger.log("‚ö†Ô∏è Error in generateProjectDashboard:");
-    Logger.log((err as Error).message);
-    Logger.log((err as Error).stack);
+    // Logger.log("‚ö†Ô∏è Error in generateProjectDashboard:");
+    // Logger.log((err as Error).message);
+    // Logger.log((err as Error).stack);
   }
 }
 
+function generateProjectSection({
+  dashboardSheet,
+  projectSheets,
+  namedRangesBySheet,
+  title,
+  startingRow,
+  startingCol,
+}: {
+  dashboardSheet: GoogleAppsScript.Spreadsheet.Sheet;
+  projectSheets: GoogleAppsScript.Spreadsheet.Sheet[];
+  namedRangesBySheet: Map<
+    string,
+    Map<string, GoogleAppsScript.Spreadsheet.Range>
+  >;
+  title: string;
+  startingRow: number;
+  startingCol: number;
+}) {
+  setDashboardStatus(dashboardSheet, `${title} ‚Äî extracting project data...`);
+
+  const extractedRows = extractAllProjectData(
+    projectSheets,
+    namedRangesBySheet,
+    dashboardSheet,
+    startingRow,
+    startingCol
+  );
+
+  const dashboardRows = transformExtractedDataToDashboardRows(
+    extractedRows,
+    projectSheets
+  );
+
+  const tableInfo = generateAndStylizeTableFromRows(
+    dashboardSheet,
+    dashboardRows,
+    startingRow,
+    startingCol,
+    title,
+    DASHBOARD_COLUMNS,
+    PROJECT_KEYS_TO_SUM,
+    { colorKeys: PROJECT_COLOR_KEYS }
+  );
+
+  return tableInfo;
+}
+
 function getOrCreateDashboardSheet(
   ss: GoogleAppsScript.Spreadsheet.Spreadsheet
 ): GoogleAppsScript.Spreadsheet.Sheet {
@@ -129,10 +136,7 @@ function getOrCreateDashboardSheet(
 
 function getCategorizedProjectSheets(
   ss: GoogleAppsScript.Spreadsheet.Spreadsheet
-): {
-  activeSheets: GoogleAppsScript.Spreadsheet.Sheet[];
-  closedSheets: GoogleAppsScript.Spreadsheet.Sheet[];
-} {
+) {
   const activeSheets: GoogleAppsScript.Spreadsheet.Sheet[] = [];
   const closedSheets: GoogleAppsScript.Spreadsheet.Sheet[] = [];
 
@@ -146,23 +150,37 @@ function getCategorizedProjectSheets(
   return { activeSheets, closedSheets };
 }
 
-function groupNamedRangesBySheet(
+function mapNamedRangesBySheet(
   namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
-): Map<string, GoogleAppsScript.Spreadsheet.NamedRange[]> {
-  const map = new Map<string, GoogleAppsScript.Spreadsheet.NamedRange[]>();
+): Map<string, Map<string, GoogleAppsScript.Spreadsheet.Range>> {
+  const map = new Map<
+    string,
+    Map<string, GoogleAppsScript.Spreadsheet.Range>
+  >();
+
   for (const nr of namedRanges) {
-    const sheetName = nr.getRange().getSheet().getName();
-    if (!map.has(sheetName)) map.set(sheetName, []);
-    map.get(sheetName)!.push(nr);
+    const range = nr.getRange();
+    const sheetName = range.getSheet().getName();
+    const name = nr.getName();
+    const normalizedName = normalizeNamedRange(name);
+
+    if (!map.has(sheetName)) {
+      map.set(sheetName, new Map());
+    }
+
+    map.get(sheetName)!.set(normalizedName, range);
   }
+
   return map;
 }
 
-function setDashboardStatus(
-  sheet: GoogleAppsScript.Spreadsheet.Sheet,
-  message: string,
-  cell: string = "A1"
-) {
-  sheet.getRange(cell).setValue(message);
-  SpreadsheetApp.flush();
+function normalizeNamedRange(name: string): string {
+  if (name.includes("!")) {
+    return name.split("!")[1].replace(/^'/, "").replace(/'$/, "");
+  }
+  const doubleUnderscoreIndex = name.indexOf("__");
+  if (doubleUnderscoreIndex > 0) {
+    return name.substring(doubleUnderscoreIndex + 2);
+  }
+  return name;
 }
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/index.ts b/src/pm-toolkit/src/domains/projects/dashboard/index.ts
index bc4ab42..57e334f 100644
--- a/src/pm-toolkit/src/domains/projects/dashboard/index.ts
+++ b/src/pm-toolkit/src/domains/projects/dashboard/index.ts
@@ -1,4 +1,4 @@
-export * from "./field-functions";
+export * from "./transform-functions";
 export * from "./utils";
 export * from "./columns";
 export * from "./generate-dashboard";
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/project-data.ts b/src/pm-toolkit/src/domains/projects/dashboard/project-data.ts
deleted file mode 100644
index ae76d05..0000000
--- a/src/pm-toolkit/src/domains/projects/dashboard/project-data.ts
+++ /dev/null
@@ -1,92 +0,0 @@
-// üìÅ projects/dashboard/project-data.ts
-
-import { DASHBOARD_COLUMNS, DASHBOARD_KEYS } from "./columns";
-import { ProjectContext, ProjectDashboardRow } from "./types";
-
-export function getProjectRowData(
-  sheetTab: GoogleAppsScript.Spreadsheet.Sheet,
-  namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
-): ProjectDashboardRow {
-  const namedRangeMap = buildNamedRangeMapFromList(namedRanges);
-  const directValueMap = buildDirectValueMap(sheetTab);
-
-  const rowData: ProjectDashboardRow = {};
-
-  const tabName = sheetTab.getName();
-  const projectMatch = tabName.match(/^(\d+)\s+/);
-  const clientMatch = tabName.match(/^\d+\s+(.+)$/);
-
-  rowData[DASHBOARD_KEYS.PROJECT_NO] = projectMatch?.[1] ?? "N/A";
-  rowData[DASHBOARD_KEYS.CLIENT_NAME] = clientMatch?.[1] ?? "N/A";
-
-  for (const field of DASHBOARD_COLUMNS) {
-    const ctx: ProjectContext = {
-      sheet: sheetTab,
-      namedRangeMap,
-      directValueMap,
-      rowData,
-    };
-
-    let value = field.valueFn?.(ctx) ?? "N/A";
-    if (field.key === DASHBOARD_KEYS.PROJECT_NO && typeof value === "number") {
-      value = value.toString();
-    }
-
-    rowData[field.key] ??= value;
-  }
-
-  return rowData;
-}
-
-// üÜï helper:
-function buildNamedRangeMapFromList(
-  namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
-): Map<string, GoogleAppsScript.Spreadsheet.Range> {
-  const map = new Map<string, GoogleAppsScript.Spreadsheet.Range>();
-  for (const nr of namedRanges) {
-    map.set(nr.getName(), nr.getRange());
-  }
-  return map;
-}
-
-/**
- * Builds a map of named range name -> Range for the current sheet only.
- */
-function buildNamedRangeMap(
-  namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
-): Map<string, GoogleAppsScript.Spreadsheet.Range> {
-  const map = new Map<string, GoogleAppsScript.Spreadsheet.Range>();
-
-  for (const nr of namedRanges) {
-    map.set(nr.getName(), nr.getRange());
-  }
-
-  return map;
-}
-
-/**
- * Fetches values from legacy cell positions using a single batch call where possible.
- */
-export function buildDirectValueMap(
-  sheet: GoogleAppsScript.Spreadsheet.Sheet
-): Map<string, any> {
-  const map = new Map<string, any>();
-
-  const legacyCells = DASHBOARD_COLUMNS.map((col) => col.legacyCell).filter(
-    (cell): cell is string => Boolean(cell)
-  );
-
-  // Fast path for empty
-  if (legacyCells.length === 0) return map;
-
-  // Slightly faster than getRangeList for sparse cells
-  for (const cell of legacyCells) {
-    try {
-      map.set(cell, sheet.getRange(cell).getValue());
-    } catch (e) {
-      map.set(cell, "N/A");
-    }
-  }
-
-  return map;
-}
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/types.ts b/src/pm-toolkit/src/domains/projects/dashboard/types.ts
index 4a0f081..72dea31 100644
--- a/src/pm-toolkit/src/domains/projects/dashboard/types.ts
+++ b/src/pm-toolkit/src/domains/projects/dashboard/types.ts
@@ -1,5 +1,6 @@
 import { BaseColumn } from "../../../columns";
 import { DashboardColumnKey, DashboardColumnLabel } from "./columns";
+import { PROJECT_DATA_FIELDS } from "./fields";
 
 export type ProjectDashboardRow = {
   [key in DashboardColumnKey]?: any;
@@ -7,9 +8,7 @@ export type ProjectDashboardRow = {
 
 export interface ProjectContext {
   sheet: GoogleAppsScript.Spreadsheet.Sheet;
-  namedRangeMap: Map<string, GoogleAppsScript.Spreadsheet.Range>;
-  directValueMap: Map<string, any>;
-  rowData: ProjectDashboardRow;
+  extractedProjectData: ExtractedProjectData;
 }
 
 export type ProjectColumn = BaseColumn<
@@ -19,3 +18,15 @@ export type ProjectColumn = BaseColumn<
 > & {
   legacyCell?: string;
 };
+
+export interface ProjectTransformContext {
+  rawData: ExtractedProjectData;
+  rowData: ProjectDashboardRow;
+}
+
+// In types.ts
+export type ProjectFieldKey = (typeof PROJECT_DATA_FIELDS)[number]["key"];
+
+export type ExtractedProjectData = {
+  [K in ProjectFieldKey]: number | string | null;
+};
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/utils.ts b/src/pm-toolkit/src/domains/projects/dashboard/utils.ts
index 2008e33..60be19a 100644
--- a/src/pm-toolkit/src/domains/projects/dashboard/utils.ts
+++ b/src/pm-toolkit/src/domains/projects/dashboard/utils.ts
@@ -2,13 +2,15 @@ import { MAX_ADVANCE_PERCENTAGE } from "../../../constants";
 import { DASHBOARD_COLUMNS, DashboardColumnKey } from "./columns";
 import { ProjectDashboardRow } from "./types";
 import { getNamedRange } from "../../../utils/helpers";
+import { PROJECT_DATA_FIELDS } from "./fields";
 
 export function getFieldValue(
   rowData: ProjectDashboardRow,
   key: DashboardColumnKey
 ) {
   if (!(key in rowData)) {
-    throw new Error(`Key not found in rowData: ${key}`);
+    Logger.log(`‚ùå getFieldValue: missing key "${key}"`);
+    return "N/A from getFieldValue";
   }
   return rowData[key];
 }
@@ -27,16 +29,69 @@ export function getValueFromNamedOrLegacy(
   namedRange: string,
   columnKey: string
 ): number | string {
-  const nr = getNamedRange(namedRangeMap, namedRange); // ‚úÖ robust check
-  if (nr) return nr.getValue();
+  const range = namedRangeMap.get(namedRange);
+  if (range) {
+    const val = range.getValue();
+    // Logger.log(`‚úÖ ${namedRange}: found via named range ‚Üí ${val}`);
+    return val;
+  }
+
+  const field = PROJECT_DATA_FIELDS.find((f) => f.key === columnKey);
 
-  const column = DASHBOARD_COLUMNS.find((col) => col.key === columnKey);
-  const cellRef = column?.legacyCell;
+  // If the field is undefined or doesn't have a legacyCell, exit early
+  if (!field || !("legacyCell" in field)) {
+    // Logger.log(`‚ö†Ô∏è ${columnKey}: missing legacyCell`);
+    return "N/A";
+  }
 
-  if (cellRef) {
-    const value = directValueMap.get(cellRef);
-    if (value !== undefined) return value;
+  const cellRef = field.legacyCell;
+  const value = directValueMap.get(cellRef);
+  if (value !== undefined && value !== null) {
+    // Logger.log(`üï∞Ô∏è ${namedRange}: fallback to legacy ${cellRef} ‚Üí ${value}`);
+    return value;
   }
 
+  // Logger.log(`‚ùå ${namedRange}: not found in named or legacy (${cellRef})`);
   return "N/A";
 }
+
+export function setDashboardStatus(
+  sheet: GoogleAppsScript.Spreadsheet.Sheet,
+  message: string,
+  cell: string = "A1"
+) {
+  sheet.getRange(cell).setValue(message);
+  SpreadsheetApp.flush();
+}
+
+/**
+ * Fetches values from legacy cell positions using a single batch call where possible.
+ */
+export function buildDirectValueMap(
+  sheet: GoogleAppsScript.Spreadsheet.Sheet
+): Map<string, any> {
+  const map = new Map<string, any>();
+
+  const legacyCells = DASHBOARD_COLUMNS.map((col) => col.legacyCell).filter(
+    (cell): cell is string => Boolean(cell)
+  );
+
+  // Fast path for empty
+  if (legacyCells.length === 0) return map;
+
+  // Slightly faster than getRangeList for sparse cells
+  for (const cell of legacyCells) {
+    try {
+      map.set(cell, sheet.getRange(cell).getValue());
+    } catch (e) {
+      map.set(cell, "N/A");
+    }
+  }
+
+  // Logger.log(`üì¶ Legacy value map for ${sheet.getName()}:`);
+  for (const [cell, value] of map.entries()) {
+    // Logger.log(`   ${cell} ‚Üí ${value}`);
+  }
+
+  return map;
+}
diff --git a/src/pm-toolkit/src/utils/helpers.ts b/src/pm-toolkit/src/utils/helpers.ts
index 18d538f..fa7d180 100644
--- a/src/pm-toolkit/src/utils/helpers.ts
+++ b/src/pm-toolkit/src/utils/helpers.ts
@@ -1,9 +1,11 @@
 import { BaseColumn } from "../columns/types";
 import { MONTH_NAMES } from "../constants";
 
-export function toNumber(value: string) {
+export function toNullableNumber(value: unknown): number | null {
+  if (value === null || value === undefined || value === "") return null;
+
   const num = Number(value);
-  return isNaN(num) ? 0 : num;
+  return isNaN(num) ? null : num;
 }
 
 export function setNamedValue(
@@ -20,10 +22,10 @@ export function setNamedValue(
     if (range) {
       range.setValue(value);
     } else {
-      Logger.log(`Named range '${rangeName}' not found on ${sheet.getName()}`);
+      // Logger.log(`Named range '${rangeName}' not found on ${sheet.getName()}`);
     }
   } catch (e) {
-    Logger.log(`Error setting named range '${rangeName}': ${e}`);
+    // Logger.log(`Error setting named range '${rangeName}': ${e}`);
   }
 }
 
