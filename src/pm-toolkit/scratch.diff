diff --git a/src/pm-toolkit/scratch.diff b/src/pm-toolkit/scratch.diff
index 10771b9..e69de29 100644
--- a/src/pm-toolkit/scratch.diff
+++ b/src/pm-toolkit/scratch.diff
@@ -1,735 +0,0 @@
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/columns.ts b/src/pm-toolkit/src/domains/projects/dashboard/columns.ts
-index c9da177..f1f85cd 100644
---- a/src/pm-toolkit/src/domains/projects/dashboard/columns.ts
-+++ b/src/pm-toolkit/src/domains/projects/dashboard/columns.ts
-@@ -2,7 +2,7 @@ import {
-   EXPECTED_PROFIT_PERCENTAGE,
-   MAX_ADVANCE_PERCENTAGE,
- } from "../../../constants";
--import * as GF from "./field-functions";
-+import * as GF from "./transform-functions";
- import { ProjectColumn, ProjectContext } from "./types";
- 
- export const DASHBOARD_KEYS = {
-@@ -43,14 +43,14 @@ export const DASHBOARD_COLUMNS: ProjectColumn[] = [
-   {
-     key: DASHBOARD_KEYS.PROJECT_NO,
-     label: DASHBOARD_LABELS.PROJECT_NO,
--    valueFn: (ctx: ProjectContext) => GF.getProjectNumberFromRow(ctx.rowData),
-+    valueFn: (ctx: ProjectContext) => GF.getProjectNumber(ctx),
-     format: "text",
-     align: "center",
-   },
-   {
-     key: DASHBOARD_KEYS.CLIENT_NAME,
-     label: DASHBOARD_LABELS.CLIENT_NAME,
--    valueFn: (ctx: ProjectContext) => GF.getClientNameFromRow(ctx.rowData),
-+    valueFn: (ctx: ProjectContext) => GF.getClientName(ctx),
-     format: "text",
-     align: "left",
-   },
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/field-functions.ts b/src/pm-toolkit/src/domains/projects/dashboard/field-functions.ts
-deleted file mode 100644
-index b7a2a1b..0000000
---- a/src/pm-toolkit/src/domains/projects/dashboard/field-functions.ts
-+++ /dev/null
-@@ -1,149 +0,0 @@
--import type { ProjectContext } from "./types";
--import * as NR from "../../../constants/named-ranges";
--import { calculateAdvanceMax } from "./utils";
--import { getFieldValue } from "./utils";
--import { toNumber } from "../../../utils/helpers";
--import { EXPECTED_PROFIT_PERCENTAGE } from "../../../constants";
--import { getValueFromNamedOrLegacy } from "./utils";
--import { DASHBOARD_KEYS as KEYS } from "./columns";
--
--export function getProjectNumberFromRow(
--  rowData: Record<string, unknown>
--): string {
--  return String(rowData[KEYS.PROJECT_NO] ?? "N/A");
--}
--
--export function getClientNameFromRow(rowData: Record<string, unknown>): string {
--  return String(rowData[KEYS.CLIENT_NAME] ?? "N/A");
--}
--
--export function getClientName({
--  sheet,
--  namedRangeMap,
--}: ProjectContext): string {
--  const nr = namedRangeMap.get(NR.NR_CLIENT_NAME);
--  if (nr) return nr.getValue();
--
--  const name = sheet.getName();
--  const match = name.trim().match(/^\d+\s+(.+)$/);
--  return match ? match[1] : "N/A";
--}
--
--export function getContractPrice({
--  namedRangeMap,
--  directValueMap,
--}: ProjectContext): number | string {
--  return getValueFromNamedOrLegacy(
--    namedRangeMap,
--    directValueMap,
--    NR.NR_CONTRACT_PRICE,
--    KEYS.CONTRACT_PRICE
--  );
--}
--
--export function getChangeOrders({
--  namedRangeMap,
--  directValueMap,
--}: ProjectContext): number | string {
--  return getValueFromNamedOrLegacy(
--    namedRangeMap,
--    directValueMap,
--    NR.NR_CHANGE_ORDER_TOTAL,
--    KEYS.CHANGE_ORDERS
--  );
--}
--
--export function getExpenses({
--  namedRangeMap,
--  directValueMap,
--}: ProjectContext): number | string {
--  return getValueFromNamedOrLegacy(
--    namedRangeMap,
--    directValueMap,
--    NR.NR_EXPENSE_TOTAL,
--    KEYS.EXPENSES
--  );
--}
--
--export function getMaxAdvance({ rowData }: ProjectContext): number | string {
--  const contractPrice = toNumber(getFieldValue(rowData, KEYS.CONTRACT_PRICE));
--  const changeOrders = toNumber(getFieldValue(rowData, KEYS.CHANGE_ORDERS));
--
--  if (typeof contractPrice !== "number" || typeof changeOrders !== "number")
--    return "N/A";
--
--  return calculateAdvanceMax(contractPrice, changeOrders);
--}
--
--// export function getMaxAdvance({
--//   namedRangeMap,
--//   directValueMap,
--// }: ProjectContext): number | string {
--//   return getValueFromNamedOrLegacy(
--//     namedRangeMap,
--//     directValueMap,
--//     NR.NR_ADVANCE_MAX,
--//     KEYS.MAX_ADVANCE
--//   );
--// }
--
--export function getTotalAdvance({
--  namedRangeMap,
--  directValueMap,
--}: ProjectContext): number | string {
--  return getValueFromNamedOrLegacy(
--    namedRangeMap,
--    directValueMap,
--    NR.NR_ADVANCE_TOTAL,
--    KEYS.TOTAL_ADVANCE
--  );
--}
--
--export function getAdvanceBalance({
--  rowData,
--}: ProjectContext): number | string {
--  const maxAdvance = toNumber(getFieldValue(rowData, KEYS.MAX_ADVANCE));
--  const totalAdvance = toNumber(getFieldValue(rowData, KEYS.TOTAL_ADVANCE));
--
--  if (typeof maxAdvance !== "number" || typeof totalAdvance !== "number")
--    return "N/A";
--
--  return maxAdvance - totalAdvance;
--}
--
--export function getPMAfterAdvance({
--  namedRangeMap,
--  directValueMap,
--}: ProjectContext): number | string {
--  return getValueFromNamedOrLegacy(
--    namedRangeMap,
--    directValueMap,
--    NR.NR_PM_AFTER_ADVANCE,
--    KEYS.PM_AFTER_ADVANCE
--  );
--}
--
--export function getExpectedProfit({
--  rowData,
--}: ProjectContext): number | string {
--  // 20% of (contract price + change orders)
--  const contractPrice = toNumber(getFieldValue(rowData, KEYS.CONTRACT_PRICE));
--  const changeOrders = toNumber(getFieldValue(rowData, KEYS.CHANGE_ORDERS));
--
--  if (typeof contractPrice !== "number" || typeof changeOrders !== "number")
--    return "N/A";
--
--  return ((contractPrice + changeOrders) * EXPECTED_PROFIT_PERCENTAGE) / 100;
--}
--
--export function getProfitAfterAdvance({
--  rowData,
--}: ProjectContext): number | string {
--  const expectedProfit = toNumber(getFieldValue(rowData, KEYS.EXPECTED_PROFIT));
--  const totalAdvance = toNumber(getFieldValue(rowData, KEYS.TOTAL_ADVANCE));
--
--  if (typeof expectedProfit !== "number" || typeof totalAdvance !== "number")
--    return "N/A";
--
--  return expectedProfit - totalAdvance;
--}
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts b/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts
-index d1c5025..9ad28f8 100644
---- a/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts
-+++ b/src/pm-toolkit/src/domains/projects/dashboard/generate-dashboard.ts
-@@ -7,11 +7,26 @@ import {
- import { isClosedTabName, startsWithProjectNumber } from "../utils";
- import { DASHBOARD_COLUMNS, DASHBOARD_KEYS } from "./columns";
- import { generateAndStylizeTableFromRows } from "../../../utils";
--import { getProjectRowData } from "./project-data";
-+import { extractAllProjectData } from "./data-extraction";
-+import { transformExtractedDataToDashboardRows } from "./data-transformation";
-+import { setDashboardStatus } from "./utils";
- import { addTimestamp } from "../../../styles";
--import { ProjectDashboardRow } from "./types";
- import { toA1Notation } from "../../../utils/helpers";
- 
-+const PROJECT_KEYS_TO_SUM = [
-+  DASHBOARD_KEYS.CONTRACT_PRICE,
-+  DASHBOARD_KEYS.CHANGE_ORDERS,
-+  DASHBOARD_KEYS.MAX_ADVANCE,
-+  DASHBOARD_KEYS.TOTAL_ADVANCE,
-+  DASHBOARD_KEYS.ADVANCE_BALANCE,
-+];
-+
-+const PROJECT_COLOR_KEYS = [
-+  DASHBOARD_KEYS.EXPECTED_PROFIT,
-+  DASHBOARD_KEYS.ADVANCE_BALANCE,
-+  DASHBOARD_KEYS.PM_AFTER_ADVANCE,
-+] as const;
-+
- export function generateProjectDashboard() {
-   try {
-     const ss = SpreadsheetApp.getActiveSpreadsheet();
-@@ -20,104 +35,96 @@ export function generateProjectDashboard() {
-     setDashboardStatus(dashboardSheet, "‚è≥ Generating dashboard...");
- 
-     const { activeSheets, closedSheets } = getCategorizedProjectSheets(ss);
--    const namedRangesBySheet = groupNamedRangesBySheet(ss.getNamedRanges());
--
--    Logger.log(`Found ${activeSheets.length} active sheets`);
--    Logger.log(`Found ${closedSheets.length} closed sheets`);
-+    const namedRangesBySheet = mapNamedRangesBySheet(ss.getNamedRanges());
- 
-     const startRow = 1;
-     const startColActive = 1;
-     const startColClosed = DASHBOARD_COLUMNS.length + COL_GAP_BETWEEN_TABLES;
- 
--    const PROJECT_KEYS_TO_SUM = [
--      DASHBOARD_KEYS.CONTRACT_PRICE,
--      DASHBOARD_KEYS.CHANGE_ORDERS,
--      DASHBOARD_KEYS.MAX_ADVANCE,
--      DASHBOARD_KEYS.TOTAL_ADVANCE,
--      DASHBOARD_KEYS.ADVANCE_BALANCE,
--    ];
--
--    const PROJECT_COLOR_KEYS = [
--      DASHBOARD_KEYS.EXPECTED_PROFIT,
--      DASHBOARD_KEYS.ADVANCE_BALANCE,
--      DASHBOARD_KEYS.PM_AFTER_ADVANCE,
--    ] as const;
--
--    // üü¢ Active Projects Table
--    setDashboardStatus(dashboardSheet, "üìä Generating Active Projects...");
--    const activeRows: ProjectDashboardRow[] = [];
--    let beginningRow = startRow;
--    let beginningCol = startColActive;
--    for (let i = 0; i < activeSheets.length; i++) {
--      const sheet = activeSheets[i];
--      setDashboardStatus(
--        dashboardSheet,
--        `üìä Generating Active Projects... (${i + 1}/${activeSheets.length})`,
--        toA1Notation(beginningCol, beginningRow)
--      );
--      const row = getProjectRowData(
--        sheet,
--        namedRangesBySheet.get(sheet.getName()) ?? []
--      );
--      activeRows.push(row);
--    }
--
--    generateAndStylizeTableFromRows(
-+    const activeTableInfo = generateProjectSection({
-       dashboardSheet,
--      activeRows,
--      startRow,
--      startColActive,
--      "üü¢ Active Projects",
--      DASHBOARD_COLUMNS,
--      PROJECT_KEYS_TO_SUM,
--      { colorKeys: PROJECT_COLOR_KEYS }
--    );
--
--    // üî¥ Closed Projects Table
--    const closedRows: ProjectDashboardRow[] = [];
--    beginningRow = startRow;
--    beginningCol = startColClosed;
--    for (let i = 0; i < closedSheets.length; i++) {
--      const sheet = closedSheets[i];
--      setDashboardStatus(
--        dashboardSheet,
--        `üìä Generating Closed Projects... (${i + 1}/${closedSheets.length})`,
--        toA1Notation(beginningCol, beginningRow)
--      );
--      const row = getProjectRowData(
--        sheet,
--        namedRangesBySheet.get(sheet.getName()) ?? []
--      );
--      closedRows.push(row);
--    }
--    generateAndStylizeTableFromRows(
-+      projectSheets: activeSheets,
-+      namedRangesBySheet,
-+      title: "üü¢ Active Projects",
-+      startingRow: startRow,
-+      startingCol: startColActive,
-+    });
-+
-+    const closedTableInfo = generateProjectSection({
-+      dashboardSheet,
-+      projectSheets: closedSheets,
-+      namedRangesBySheet,
-+      title: "üî¥ Closed Projects",
-+      startingRow: startRow,
-+      startingCol: startColClosed,
-+    });
-+
-+    // ‚úÖ Add timestamp two rows below the end of the active table
-+    addTimestamp(
-       dashboardSheet,
--      closedRows,
--      startRow,
--      startColClosed,
--      "üî¥ Closed Projects",
--      DASHBOARD_COLUMNS,
--      PROJECT_KEYS_TO_SUM,
--      { colorKeys: PROJECT_COLOR_KEYS }
-+      activeTableInfo.endRow + 2,
-+      1,
-+      "Dashboard last updated:"
-     );
- 
--    // ‚úÖ Done
--    const numActiveRows = activeRows.length;
--    const extraRows = 3; // title, headers, description
--    const lastRow = startRow + numActiveRows + extraRows + 2;
--    addTimestamp(dashboardSheet, lastRow, 1, "Dashboard last updated:");
--
-     SpreadsheetApp.getActiveSpreadsheet().toast(
--      "Dashboard ready ‚úÖ",
-+      "Projects Dashboard ready ‚úÖ",
-       "Ace Toolkit"
-     );
-   } catch (err) {
--    Logger.log("‚ö†Ô∏è Error in generateProjectDashboard:");
--    Logger.log((err as Error).message);
--    Logger.log((err as Error).stack);
-+    // Logger.log("‚ö†Ô∏è Error in generateProjectDashboard:");
-+    // Logger.log((err as Error).message);
-+    // Logger.log((err as Error).stack);
-   }
- }
- 
-+function generateProjectSection({
-+  dashboardSheet,
-+  projectSheets,
-+  namedRangesBySheet,
-+  title,
-+  startingRow,
-+  startingCol,
-+}: {
-+  dashboardSheet: GoogleAppsScript.Spreadsheet.Sheet;
-+  projectSheets: GoogleAppsScript.Spreadsheet.Sheet[];
-+  namedRangesBySheet: Map<
-+    string,
-+    Map<string, GoogleAppsScript.Spreadsheet.Range>
-+  >;
-+  title: string;
-+  startingRow: number;
-+  startingCol: number;
-+}) {
-+  setDashboardStatus(dashboardSheet, `${title} ‚Äî extracting project data...`);
-+
-+  const extractedRows = extractAllProjectData(
-+    projectSheets,
-+    namedRangesBySheet,
-+    dashboardSheet,
-+    startingRow,
-+    startingCol
-+  );
-+
-+  const dashboardRows = transformExtractedDataToDashboardRows(
-+    extractedRows,
-+    projectSheets
-+  );
-+
-+  const tableInfo = generateAndStylizeTableFromRows(
-+    dashboardSheet,
-+    dashboardRows,
-+    startingRow,
-+    startingCol,
-+    title,
-+    DASHBOARD_COLUMNS,
-+    PROJECT_KEYS_TO_SUM,
-+    { colorKeys: PROJECT_COLOR_KEYS }
-+  );
-+
-+  return tableInfo;
-+}
-+
- function getOrCreateDashboardSheet(
-   ss: GoogleAppsScript.Spreadsheet.Spreadsheet
- ): GoogleAppsScript.Spreadsheet.Sheet {
-@@ -129,10 +136,7 @@ function getOrCreateDashboardSheet(
- 
- function getCategorizedProjectSheets(
-   ss: GoogleAppsScript.Spreadsheet.Spreadsheet
--): {
--  activeSheets: GoogleAppsScript.Spreadsheet.Sheet[];
--  closedSheets: GoogleAppsScript.Spreadsheet.Sheet[];
--} {
-+) {
-   const activeSheets: GoogleAppsScript.Spreadsheet.Sheet[] = [];
-   const closedSheets: GoogleAppsScript.Spreadsheet.Sheet[] = [];
- 
-@@ -146,23 +150,37 @@ function getCategorizedProjectSheets(
-   return { activeSheets, closedSheets };
- }
- 
--function groupNamedRangesBySheet(
-+function mapNamedRangesBySheet(
-   namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
--): Map<string, GoogleAppsScript.Spreadsheet.NamedRange[]> {
--  const map = new Map<string, GoogleAppsScript.Spreadsheet.NamedRange[]>();
-+): Map<string, Map<string, GoogleAppsScript.Spreadsheet.Range>> {
-+  const map = new Map<
-+    string,
-+    Map<string, GoogleAppsScript.Spreadsheet.Range>
-+  >();
-+
-   for (const nr of namedRanges) {
--    const sheetName = nr.getRange().getSheet().getName();
--    if (!map.has(sheetName)) map.set(sheetName, []);
--    map.get(sheetName)!.push(nr);
-+    const range = nr.getRange();
-+    const sheetName = range.getSheet().getName();
-+    const name = nr.getName();
-+    const normalizedName = normalizeNamedRange(name);
-+
-+    if (!map.has(sheetName)) {
-+      map.set(sheetName, new Map());
-+    }
-+
-+    map.get(sheetName)!.set(normalizedName, range);
-   }
-+
-   return map;
- }
- 
--function setDashboardStatus(
--  sheet: GoogleAppsScript.Spreadsheet.Sheet,
--  message: string,
--  cell: string = "A1"
--) {
--  sheet.getRange(cell).setValue(message);
--  SpreadsheetApp.flush();
-+function normalizeNamedRange(name: string): string {
-+  if (name.includes("!")) {
-+    return name.split("!")[1].replace(/^'/, "").replace(/'$/, "");
-+  }
-+  const doubleUnderscoreIndex = name.indexOf("__");
-+  if (doubleUnderscoreIndex > 0) {
-+    return name.substring(doubleUnderscoreIndex + 2);
-+  }
-+  return name;
- }
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/index.ts b/src/pm-toolkit/src/domains/projects/dashboard/index.ts
-index bc4ab42..57e334f 100644
---- a/src/pm-toolkit/src/domains/projects/dashboard/index.ts
-+++ b/src/pm-toolkit/src/domains/projects/dashboard/index.ts
-@@ -1,4 +1,4 @@
--export * from "./field-functions";
-+export * from "./transform-functions";
- export * from "./utils";
- export * from "./columns";
- export * from "./generate-dashboard";
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/project-data.ts b/src/pm-toolkit/src/domains/projects/dashboard/project-data.ts
-deleted file mode 100644
-index ae76d05..0000000
---- a/src/pm-toolkit/src/domains/projects/dashboard/project-data.ts
-+++ /dev/null
-@@ -1,92 +0,0 @@
--// üìÅ projects/dashboard/project-data.ts
--
--import { DASHBOARD_COLUMNS, DASHBOARD_KEYS } from "./columns";
--import { ProjectContext, ProjectDashboardRow } from "./types";
--
--export function getProjectRowData(
--  sheetTab: GoogleAppsScript.Spreadsheet.Sheet,
--  namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
--): ProjectDashboardRow {
--  const namedRangeMap = buildNamedRangeMapFromList(namedRanges);
--  const directValueMap = buildDirectValueMap(sheetTab);
--
--  const rowData: ProjectDashboardRow = {};
--
--  const tabName = sheetTab.getName();
--  const projectMatch = tabName.match(/^(\d+)\s+/);
--  const clientMatch = tabName.match(/^\d+\s+(.+)$/);
--
--  rowData[DASHBOARD_KEYS.PROJECT_NO] = projectMatch?.[1] ?? "N/A";
--  rowData[DASHBOARD_KEYS.CLIENT_NAME] = clientMatch?.[1] ?? "N/A";
--
--  for (const field of DASHBOARD_COLUMNS) {
--    const ctx: ProjectContext = {
--      sheet: sheetTab,
--      namedRangeMap,
--      directValueMap,
--      rowData,
--    };
--
--    let value = field.valueFn?.(ctx) ?? "N/A";
--    if (field.key === DASHBOARD_KEYS.PROJECT_NO && typeof value === "number") {
--      value = value.toString();
--    }
--
--    rowData[field.key] ??= value;
--  }
--
--  return rowData;
--}
--
--// üÜï helper:
--function buildNamedRangeMapFromList(
--  namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
--): Map<string, GoogleAppsScript.Spreadsheet.Range> {
--  const map = new Map<string, GoogleAppsScript.Spreadsheet.Range>();
--  for (const nr of namedRanges) {
--    map.set(nr.getName(), nr.getRange());
--  }
--  return map;
--}
--
--/**
-- * Builds a map of named range name -> Range for the current sheet only.
-- */
--function buildNamedRangeMap(
--  namedRanges: GoogleAppsScript.Spreadsheet.NamedRange[]
--): Map<string, GoogleAppsScript.Spreadsheet.Range> {
--  const map = new Map<string, GoogleAppsScript.Spreadsheet.Range>();
--
--  for (const nr of namedRanges) {
--    map.set(nr.getName(), nr.getRange());
--  }
--
--  return map;
--}
--
--/**
-- * Fetches values from legacy cell positions using a single batch call where possible.
-- */
--export function buildDirectValueMap(
--  sheet: GoogleAppsScript.Spreadsheet.Sheet
--): Map<string, any> {
--  const map = new Map<string, any>();
--
--  const legacyCells = DASHBOARD_COLUMNS.map((col) => col.legacyCell).filter(
--    (cell): cell is string => Boolean(cell)
--  );
--
--  // Fast path for empty
--  if (legacyCells.length === 0) return map;
--
--  // Slightly faster than getRangeList for sparse cells
--  for (const cell of legacyCells) {
--    try {
--      map.set(cell, sheet.getRange(cell).getValue());
--    } catch (e) {
--      map.set(cell, "N/A");
--    }
--  }
--
--  return map;
--}
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/types.ts b/src/pm-toolkit/src/domains/projects/dashboard/types.ts
-index 4a0f081..72dea31 100644
---- a/src/pm-toolkit/src/domains/projects/dashboard/types.ts
-+++ b/src/pm-toolkit/src/domains/projects/dashboard/types.ts
-@@ -1,5 +1,6 @@
- import { BaseColumn } from "../../../columns";
- import { DashboardColumnKey, DashboardColumnLabel } from "./columns";
-+import { PROJECT_DATA_FIELDS } from "./fields";
- 
- export type ProjectDashboardRow = {
-   [key in DashboardColumnKey]?: any;
-@@ -7,9 +8,7 @@ export type ProjectDashboardRow = {
- 
- export interface ProjectContext {
-   sheet: GoogleAppsScript.Spreadsheet.Sheet;
--  namedRangeMap: Map<string, GoogleAppsScript.Spreadsheet.Range>;
--  directValueMap: Map<string, any>;
--  rowData: ProjectDashboardRow;
-+  extractedProjectData: ExtractedProjectData;
- }
- 
- export type ProjectColumn = BaseColumn<
-@@ -19,3 +18,15 @@ export type ProjectColumn = BaseColumn<
- > & {
-   legacyCell?: string;
- };
-+
-+export interface ProjectTransformContext {
-+  rawData: ExtractedProjectData;
-+  rowData: ProjectDashboardRow;
-+}
-+
-+// In types.ts
-+export type ProjectFieldKey = (typeof PROJECT_DATA_FIELDS)[number]["key"];
-+
-+export type ExtractedProjectData = {
-+  [K in ProjectFieldKey]: number | string | null;
-+};
-diff --git a/src/pm-toolkit/src/domains/projects/dashboard/utils.ts b/src/pm-toolkit/src/domains/projects/dashboard/utils.ts
-index 2008e33..60be19a 100644
---- a/src/pm-toolkit/src/domains/projects/dashboard/utils.ts
-+++ b/src/pm-toolkit/src/domains/projects/dashboard/utils.ts
-@@ -2,13 +2,15 @@ import { MAX_ADVANCE_PERCENTAGE } from "../../../constants";
- import { DASHBOARD_COLUMNS, DashboardColumnKey } from "./columns";
- import { ProjectDashboardRow } from "./types";
- import { getNamedRange } from "../../../utils/helpers";
-+import { PROJECT_DATA_FIELDS } from "./fields";
- 
- export function getFieldValue(
-   rowData: ProjectDashboardRow,
-   key: DashboardColumnKey
- ) {
-   if (!(key in rowData)) {
--    throw new Error(`Key not found in rowData: ${key}`);
-+    Logger.log(`‚ùå getFieldValue: missing key "${key}"`);
-+    return "N/A from getFieldValue";
-   }
-   return rowData[key];
- }
-@@ -27,16 +29,69 @@ export function getValueFromNamedOrLegacy(
-   namedRange: string,
-   columnKey: string
- ): number | string {
--  const nr = getNamedRange(namedRangeMap, namedRange); // ‚úÖ robust check
--  if (nr) return nr.getValue();
-+  const range = namedRangeMap.get(namedRange);
-+  if (range) {
-+    const val = range.getValue();
-+    // Logger.log(`‚úÖ ${namedRange}: found via named range ‚Üí ${val}`);
-+    return val;
-+  }
-+
-+  const field = PROJECT_DATA_FIELDS.find((f) => f.key === columnKey);
- 
--  const column = DASHBOARD_COLUMNS.find((col) => col.key === columnKey);
--  const cellRef = column?.legacyCell;
-+  // If the field is undefined or doesn't have a legacyCell, exit early
-+  if (!field || !("legacyCell" in field)) {
-+    // Logger.log(`‚ö†Ô∏è ${columnKey}: missing legacyCell`);
-+    return "N/A";
-+  }
- 
--  if (cellRef) {
--    const value = directValueMap.get(cellRef);
--    if (value !== undefined) return value;
-+  const cellRef = field.legacyCell;
-+  const value = directValueMap.get(cellRef);
-+  if (value !== undefined && value !== null) {
-+    // Logger.log(`üï∞Ô∏è ${namedRange}: fallback to legacy ${cellRef} ‚Üí ${value}`);
-+    return value;
-   }
- 
-+  // Logger.log(`‚ùå ${namedRange}: not found in named or legacy (${cellRef})`);
-   return "N/A";
- }
-+
-+export function setDashboardStatus(
-+  sheet: GoogleAppsScript.Spreadsheet.Sheet,
-+  message: string,
-+  cell: string = "A1"
-+) {
-+  sheet.getRange(cell).setValue(message);
-+  SpreadsheetApp.flush();
-+}
-+
-+/**
-+ * Fetches values from legacy cell positions using a single batch call where possible.
-+ */
-+export function buildDirectValueMap(
-+  sheet: GoogleAppsScript.Spreadsheet.Sheet
-+): Map<string, any> {
-+  const map = new Map<string, any>();
-+
-+  const legacyCells = DASHBOARD_COLUMNS.map((col) => col.legacyCell).filter(
-+    (cell): cell is string => Boolean(cell)
-+  );
-+
-+  // Fast path for empty
-+  if (legacyCells.length === 0) return map;
-+
-+  // Slightly faster than getRangeList for sparse cells
-+  for (const cell of legacyCells) {
-+    try {
-+      map.set(cell, sheet.getRange(cell).getValue());
-+    } catch (e) {
-+      map.set(cell, "N/A");
-+    }
-+  }
-+
-+  // Logger.log(`üì¶ Legacy value map for ${sheet.getName()}:`);
-+  for (const [cell, value] of map.entries()) {
-+    // Logger.log(`   ${cell} ‚Üí ${value}`);
-+  }
-+
-+  return map;
-+}
-diff --git a/src/pm-toolkit/src/utils/helpers.ts b/src/pm-toolkit/src/utils/helpers.ts
-index 18d538f..fa7d180 100644
---- a/src/pm-toolkit/src/utils/helpers.ts
-+++ b/src/pm-toolkit/src/utils/helpers.ts
-@@ -1,9 +1,11 @@
- import { BaseColumn } from "../columns/types";
- import { MONTH_NAMES } from "../constants";
- 
--export function toNumber(value: string) {
-+export function toNullableNumber(value: unknown): number | null {
-+  if (value === null || value === undefined || value === "") return null;
-+
-   const num = Number(value);
--  return isNaN(num) ? 0 : num;
-+  return isNaN(num) ? null : num;
- }
- 
- export function setNamedValue(
-@@ -20,10 +22,10 @@ export function setNamedValue(
-     if (range) {
-       range.setValue(value);
-     } else {
--      Logger.log(`Named range '${rangeName}' not found on ${sheet.getName()}`);
-+      // Logger.log(`Named range '${rangeName}' not found on ${sheet.getName()}`);
-     }
-   } catch (e) {
--    Logger.log(`Error setting named range '${rangeName}': ${e}`);
-+    // Logger.log(`Error setting named range '${rangeName}': ${e}`);
-   }
- }
- 
diff --git a/src/pm-toolkit/src/constants/general.ts b/src/pm-toolkit/src/constants/general.ts
index c020f69..f8f87b5 100644
--- a/src/pm-toolkit/src/constants/general.ts
+++ b/src/pm-toolkit/src/constants/general.ts
@@ -13,7 +13,7 @@ export const LIB_IDENTIFIER = "AceRemodelingPMToolkit";
 export const MAX_ADVANCE_PERCENTAGE = 10;
 export const EXPECTED_PROFIT_PERCENTAGE = 20;
 export const IS_ASCENDING_ORDER = false;
-export const COLUMN_PADDING = 5;
+export const COLUMN_PADDING = 10;
 
 export const LABEL_COLUMN_INDEX = 11;
 export const VALUE_COLUMN_INDEX = 13;
diff --git a/src/pm-toolkit/src/domains/leads/columns-months.ts b/src/pm-toolkit/src/domains/leads/columns-months.ts
index 465848f..96b393e 100644
--- a/src/pm-toolkit/src/domains/leads/columns-months.ts
+++ b/src/pm-toolkit/src/domains/leads/columns-months.ts
@@ -1,83 +1,92 @@
-// leads/dashboard.ts
-import { LeadsColumn, LeadsContext } from "./types";
+import { LeadsColumn } from "./types";
+import { getMonthName, formatPercent } from "../../utils/helpers";
+import {
+  DashboardKey,
+  DashboardLabel,
+  dashboardKeys,
+  labels,
+  inputKeys,
+} from "./constants";
 import { buildLabelKeyMaps } from "../../columns/utils";
-import { formatPercent } from "../../utils/helpers";
-import { LEADS_KEYS, LEADS_LABELS } from "./constants";
-import { getMonthName } from "../../utils/helpers";
-
-export type LeadsColumnKey = (typeof LEADS_KEYS)[keyof typeof LEADS_KEYS];
-export type LeadsColumnLabel = (typeof LEADS_LABELS)[keyof typeof LEADS_LABELS];
 
 export const LEADS_COLUMNS: LeadsColumn[] = [
   // {
-  //   key: LEADS_KEYS.YEAR,
-  //   label: LEADS_LABELS.YEAR,
-  //   valueFn: ({ rowData }: LeadsContext) => rowData[LEADS_KEYS.YEAR],
+  //   key: DASHBOARD_KEYS.YEAR,
+  //   label: DASHBOARD_LABELS.YEAR,
+  //   valueFn: ({ inputRowData }: LeadsRowContext) =>
+  //     inputRowData[INPUT_KEYS.YEAR],
   //   format: "number",
   //   align: "center",
   // },
   {
-    key: LEADS_KEYS.MONTH,
-    label: LEADS_LABELS.MONTH,
-    valueFn: ({ rowData }: LeadsContext) =>
-      getMonthName(rowData[LEADS_KEYS.MONTH]),
+    key: dashboardKeys.MONTH,
+    label: labels.MONTH,
+    valueFn: ({ inputRowData }) => getMonthName(inputRowData[inputKeys.MONTH]),
     format: "number",
   },
   {
-    key: LEADS_KEYS.TOTAL_LEADS,
-    label: LEADS_LABELS.TOTAL_LEADS,
-    valueFn: ({ rowData }: LeadsContext) => rowData[LEADS_KEYS.TOTAL_LEADS],
+    key: dashboardKeys.TOTAL_LEADS,
+    label: labels.TOTAL_LEADS,
+    valueFn: ({ inputRowData }) => inputRowData[inputKeys.TOTAL_LEADS],
     format: "number",
     align: "center",
   },
   {
-    key: LEADS_KEYS.SIGNED,
-    label: LEADS_LABELS.SIGNED,
-    valueFn: ({ rowData }: LeadsContext) => rowData[LEADS_KEYS.SIGNED],
+    key: dashboardKeys.SIGNED,
+    label: labels.SIGNED,
+    valueFn: ({ inputRowData }) => inputRowData[inputKeys.SIGNED],
     format: "number",
     align: "center",
   },
   {
-    key: LEADS_KEYS.CONVERSION_RATE,
-    label: LEADS_LABELS.CONVERSION_RATE,
-    valueFn: ({ rowData }: LeadsContext) => {
-      const signed = Number(rowData[LEADS_KEYS.SIGNED]) || 0;
-      const total = Number(rowData[LEADS_KEYS.TOTAL_LEADS]) || 0;
+    key: dashboardKeys.CONVERSION_RATE,
+    label: labels.CONVERSION_RATE,
+    valueFn: ({ inputRowData }) => {
+      const signed = inputRowData[inputKeys.SIGNED] ?? 0;
+      const total = inputRowData[inputKeys.TOTAL_LEADS] ?? 0;
       return formatPercent(signed, total);
     },
     format: "percent",
     help: "Signed Proposals √∑ Total Leads",
   },
   {
-    key: LEADS_KEYS.REVENUE,
-    label: LEADS_LABELS.REVENUE,
-    valueFn: ({ rowData }: LeadsContext) => rowData[LEADS_KEYS.REVENUE],
+    key: dashboardKeys.REVENUE,
+    label: labels.REVENUE,
+    valueFn: ({ inputRowData }) => inputRowData[inputKeys.REVENUE],
     format: "currency",
   },
   {
-    key: LEADS_KEYS.REVENUE_GOAL,
-    label: LEADS_LABELS.REVENUE_GOAL,
-    // valueFn: ({ rowData }: LeadsContext) => rowData[LEADS_KEYS.REVENUE_GOAL],
-    valueFn: ({ rowData }: LeadsContext) => "666",
+    key: dashboardKeys.REVENUE_GOAL,
+    label: labels.REVENUE_GOAL,
+    description: "Monthly revenue goal",
+    valueFn: ({ inputRowData }) => inputRowData[inputKeys.REVENUE_GOAL] ?? "",
     format: "currency",
   },
   {
-    key: LEADS_KEYS.REVENUE_DIFF,
-    label: LEADS_LABELS.REVENUE_DIFF,
-    valueFn: ({ rowData }: LeadsContext) => "666",
+    key: dashboardKeys.REVENUE_DIFF,
+    label: labels.REVENUE_DIFF,
+    description: "Revenue minus goal",
+    valueFn: ({ inputRowData }) => {
+      const revenue = inputRowData[inputKeys.REVENUE];
+      const goal = inputRowData[inputKeys.REVENUE_GOAL];
+      if (typeof revenue !== "number" || typeof goal !== "number") return "";
+      return revenue - goal;
+    },
     format: "currency",
   },
   // {
-  //   key: LEADS_KEYS.PROP_NOT_SENT,
-  //   label: LEADS_LABELS.PROP_NOT_SENT,
-  //   valueFn: ({ rowData }: LeadsContext) => rowData[LEADS_KEYS.PROP_NOT_SENT],
+  //   key: DASHBOARD_KEYS.PROP_NOT_SENT,
+  //   label: DASHBOARD_LABELS.PROP_NOT_SENT,
+  //   valueFn: ({ inputRowData }) =>
+  //     inputRowData[INPUT_KEYS.PROP_NOT_SENT],
   //   format: "number",
   //   align: "center",
   // },
 ];
 
-const labelMaps = buildLabelKeyMaps<LeadsColumnKey, LeadsColumnLabel>(
+const labelMaps = buildLabelKeyMaps<DashboardKey, DashboardLabel>(
   LEADS_COLUMNS
 );
-export const LEADS_LABELS_BY_KEY = labelMaps.labelsByKey;
-export const LEADS_KEYS_BY_LABEL = labelMaps.keysByLabel;
+
+export const DASHBOARD_LABELS_BY_KEY = labelMaps.labelsByKey;
+export const DASHBOARD_KEYS_BY_LABEL = labelMaps.keysByLabel;
diff --git a/src/pm-toolkit/src/domains/leads/columns-quarters.ts b/src/pm-toolkit/src/domains/leads/columns-quarters.ts
index d9e1e72..747f379 100644
--- a/src/pm-toolkit/src/domains/leads/columns-quarters.ts
+++ b/src/pm-toolkit/src/domains/leads/columns-quarters.ts
@@ -1,76 +1,76 @@
-import { LeadsQuarterColumn, QuarterContext } from "./types";
-import { QUARTER_KEYS, QUARTER_LABELS } from "./constants";
+import {
+  quarterlyKeys,
+  quarterlyLabels,
+  QuarterlyKey,
+  QuarterlyLabel,
+} from "./constants";
+import { LeadsQuarterColumn, QuarterRowContext } from "./types";
 import { buildLabelKeyMaps } from "../../columns/utils";
 import { formatPercent } from "../../utils/helpers";
 
-export type QuarterColumnKey = (typeof QUARTER_KEYS)[keyof typeof QUARTER_KEYS];
-export type QuarterColumnLabel =
-  (typeof QUARTER_LABELS)[keyof typeof QUARTER_LABELS];
-
 export const QUARTER_COLUMNS: LeadsQuarterColumn[] = [
-  //   {
-  //     key: QUARTER_KEYS.YEAR,
-  //     label: QUARTER_LABELS.YEAR,
-  //     valueFn: ({ rowData }: QuarterContext) => rowData[QUARTER_KEYS.YEAR],
-  //     format: "number",
-  //     align: "center",
-  //   },
+  // {
+  //   key: quarterlyKeys.YEAR,
+  //   label: quarterlyLabels.YEAR,
+  //   valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.YEAR],
+  //   format: "number",
+  //   align: "center",
+  // },
   {
-    key: QUARTER_KEYS.QUARTER,
-    label: QUARTER_LABELS.QUARTER,
-    valueFn: ({ rowData }: QuarterContext) => rowData[QUARTER_KEYS.QUARTER],
+    key: quarterlyKeys.QUARTER,
+    label: quarterlyLabels.QUARTER,
+    valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.QUARTER],
     format: "text",
     align: "center",
   },
   {
-    key: QUARTER_KEYS.TOTAL_LEADS,
-    label: QUARTER_LABELS.TOTAL_LEADS,
-    valueFn: ({ rowData }: QuarterContext) => rowData[QUARTER_KEYS.TOTAL_LEADS],
+    key: quarterlyKeys.TOTAL_LEADS,
+    label: quarterlyLabels.TOTAL_LEADS,
+    valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.TOTAL_LEADS],
     format: "number",
     align: "center",
   },
   {
-    key: QUARTER_KEYS.SIGNED,
-    label: QUARTER_LABELS.SIGNED,
-    valueFn: ({ rowData }: QuarterContext) => rowData[QUARTER_KEYS.SIGNED],
+    key: quarterlyKeys.SIGNED,
+    label: quarterlyLabels.SIGNED,
+    valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.SIGNED],
     format: "number",
     align: "center",
   },
   {
-    key: QUARTER_KEYS.CONVERSION_RATE,
-    label: QUARTER_LABELS.CONVERSION_RATE,
-    valueFn: ({ rowData }: QuarterContext) => {
-      const signed = Number(rowData[QUARTER_KEYS.SIGNED]) || 0;
-      const total = Number(rowData[QUARTER_KEYS.TOTAL_LEADS]) || 0;
+    key: quarterlyKeys.CONVERSION_RATE,
+    label: quarterlyLabels.CONVERSION_RATE,
+    valueFn: ({ inputRowData }) => {
+      const signed = Number(inputRowData[quarterlyKeys.SIGNED]) || 0;
+      const total = Number(inputRowData[quarterlyKeys.TOTAL_LEADS]) || 0;
       return formatPercent(signed, total);
     },
     format: "percent",
     help: "Signed Proposals √∑ Total Leads",
   },
   {
-    key: QUARTER_KEYS.REVENUE,
-    label: QUARTER_LABELS.REVENUE,
-    valueFn: ({ rowData }: QuarterContext) => rowData[QUARTER_KEYS.REVENUE],
+    key: quarterlyKeys.REVENUE,
+    label: quarterlyLabels.REVENUE,
+    valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.REVENUE],
     format: "currency",
   },
   {
-    key: QUARTER_KEYS.REVENUE_GOAL,
-    label: QUARTER_LABELS.REVENUE_GOAL,
-    valueFn: ({ rowData }: QuarterContext) =>
-      rowData[QUARTER_KEYS.REVENUE_GOAL],
+    key: quarterlyKeys.REVENUE_GOAL,
+    label: quarterlyLabels.REVENUE_GOAL,
+    valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.REVENUE_GOAL],
     format: "currency",
   },
   {
-    key: QUARTER_KEYS.REVENUE_DIFF,
-    label: QUARTER_LABELS.REVENUE_DIFF,
-    valueFn: ({ rowData }: QuarterContext) =>
-      rowData[QUARTER_KEYS.REVENUE_DIFF],
+    key: quarterlyKeys.REVENUE_DIFF,
+    label: quarterlyLabels.REVENUE_DIFF,
+    valueFn: ({ inputRowData }) => inputRowData[quarterlyKeys.REVENUE_DIFF],
     format: "currency",
   },
 ];
 
-const labelMaps = buildLabelKeyMaps<QuarterColumnKey, QuarterColumnLabel>(
+const labelMaps = buildLabelKeyMaps<QuarterlyKey, QuarterlyLabel>(
   QUARTER_COLUMNS
 );
+
 export const QUARTER_LABELS_BY_KEY = labelMaps.labelsByKey;
 export const QUARTER_KEYS_BY_LABEL = labelMaps.keysByLabel;
diff --git a/src/pm-toolkit/src/domains/leads/constants.ts b/src/pm-toolkit/src/domains/leads/constants.ts
index 8a5ce89..f2a2777 100644
--- a/src/pm-toolkit/src/domains/leads/constants.ts
+++ b/src/pm-toolkit/src/domains/leads/constants.ts
@@ -1,27 +1,26 @@
-import { LEADS_COLUMNS } from "./columns-months";
+// üìÑ SHEET INFO
+export const INPUT_SHEET = "(WIP) Leads Input";
+export const INPUT_ANCHOR = "A1";
 
-export const PAYMENTS_INPUT_SHEET = "(WIP) Payments Input";
-export const PAYMENTS_INPUT_TABLE_ANCHOR = "A1";
+export const DASHBOARD_SHEET = "(WIP) Leads Dashboard";
 
-export const LEADS_INPUT_SHEET = "(WIP) Leads Input";
-export const LEADS_INPUT_TABLE_ANCHOR = "A1";
-
-export const LEADS_DASHBOARD_SHEET = "(WIP) Leads Dashboard";
-
-export const NR_LEADS_INPUT_TABLE = "leads_input_table";
-export const NR_LEADS_MONTHLY_GOALS = "leads_monthly_goals";
+// üìå NAMED RANGES
+export const NR_MONTHLY_GOALS = "leads_monthly_goals";
+export const NR_MONTHLY_TABLE = "leads_monthly_dashboard_table";
+export const NR_QUARTERLY_TABLE = "leads_quarterly_dashboard_table";
 
+// üßæ TEMPLATE
 export const BLANK_SHEET_TEMPLATE = "Blank Sheet Template";
 
-// Softer quarterly color coding for dashboard visualization
+// üåà QUARTER COLORS
 export const QUARTER_COLORS = {
-  Q1: "#D2E3FC", // Soft Blue for Q1 (Winter)
-  Q2: "#D9F5DD", // Soft Green for Q2 (Spring)
-  Q3: "#FEF3C0", // Soft Yellow for Q3 (Summer)
-  Q4: "#FAD2CF", // Soft Red for Q4 (Fall)
+  Q1: "#D2E3FC",
+  Q2: "#D9F5DD",
+  Q3: "#FEF3C0",
+  Q4: "#FAD2CF",
 };
 
-// Quarter to month mapping
+// üî¢ QUARTER ‚Üí MONTH
 export const QUARTER_TO_MONTHS = {
   Q1: [1, 2, 3],
   Q2: [4, 5, 6],
@@ -29,19 +28,26 @@ export const QUARTER_TO_MONTHS = {
   Q4: [10, 11, 12],
 };
 
-export const LEADS_KEYS = {
-  YEAR: "COL_LEADS_YEAR",
-  MONTH: "COL_LEADS_MONTH",
-  TOTAL_LEADS: "COLs_TOTAL_LEADS",
-  SIGNED: "COL_SIGNED_PROPOSALS",
-  REVENUE: "COL_APPROVED_REVENUE",
-  REVENUE_GOAL: "COL_REVENUE_GOAL",
-  REVENUE_DIFF: "COL_REVENUE_DIFF",
-  CONVERSION_RATE: "COL_CONVERSION_RATE",
-  PROP_NOT_SENT: "COL_PROP_NOT_SENT",
+// üîë INPUT TABLE KEYS
+export const inputKeys = {
+  YEAR: "YEAR",
+  MONTH: "MONTH",
+  TOTAL_LEADS: "TOTAL_LEADS",
+  SIGNED: "SIGNED",
+  REVENUE: "REVENUE",
+  REVENUE_GOAL: "REVENUE_GOAL",
+  PROP_NOT_SENT: "PROP_NOT_SENT",
 } as const;
 
-export const LEADS_LABELS = {
+// üîë DASHBOARD KEYS (input + derived)
+export const dashboardKeys = {
+  ...inputKeys,
+  REVENUE_DIFF: "REVENUE_DIFF",
+  CONVERSION_RATE: "CONVERSION_RATE",
+} as const;
+
+// üîñ HUMAN-FRIENDLY LABELS
+export const labels: Record<keyof typeof dashboardKeys, string> = {
   YEAR: "Year",
   MONTH: "Month",
   TOTAL_LEADS: "Total Leads",
@@ -50,19 +56,32 @@ export const LEADS_LABELS = {
   REVENUE_GOAL: "Revenue Goal",
   REVENUE_DIFF: "Revenue Difference",
   CONVERSION_RATE: "Conversion Rate (%)",
-  PROP_NOT_SENT: "Proposals Not Sent",
-} as const;
+  PROP_NOT_SENT: "Prop. Not Sent",
+};
 
-export const QUARTER_KEYS = {
-  ...LEADS_KEYS,
-  QUARTER: "COL_QUARTER",
+// ‚ûï FOR QUARTERLY
+export const quarterlyKeys = {
+  ...dashboardKeys,
+  QUARTER: "QUARTER",
 } as const;
 
-export const QUARTER_LABELS = {
-  ...LEADS_LABELS,
+export const quarterlyLabels = {
+  ...labels,
   QUARTER: "Quarter",
-} as const;
+};
+
+// üß† TYPE ALIASES
+export type InputKey = keyof typeof inputKeys;
+export type DashboardKey = keyof typeof dashboardKeys;
+export type DashboardLabel = (typeof labels)[DashboardKey];
+
+// üîÅ MAPPINGS
+export const KEYS_BY_LABEL: Record<DashboardLabel, DashboardKey> =
+  Object.fromEntries(Object.entries(labels).map(([k, v]) => [v, k])) as Record<
+    DashboardLabel,
+    DashboardKey
+  >;
 
-export const NR_LEADS_MONTHLY_DASHBOARD_TABLE = "leads_monthly_dashboard_table";
-export const NR_LEADS_QUARTERLY_DASHBOARD_TABLE =
-  "leads_quarterly_dashboard_table";
+export const LABELS_BY_KEY: Record<DashboardKey, DashboardLabel> = labels;
+export type QuarterlyKey = keyof typeof quarterlyKeys;
+export type QuarterlyLabel = (typeof quarterlyLabels)[QuarterlyKey];
diff --git a/src/pm-toolkit/src/domains/leads/data-months.ts b/src/pm-toolkit/src/domains/leads/data-months.ts
deleted file mode 100644
index ee14277..0000000
--- a/src/pm-toolkit/src/domains/leads/data-months.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { LeadsInputRow, LeadsDashboardRow, LeadsRowContext } from "./types";
-import { LEADS_COLUMNS } from "./columns-months";
-import { mapInputToDashboardRows } from "../../utils/helpers";
-
-export function createMonthlyDashboardRows(
-  inputRows: LeadsInputRow[],
-  existingGoals: Map<string, number>
-): LeadsDashboardRow[] {
-  return mapInputToDashboardRows<LeadsRowContext, LeadsDashboardRow>(
-    inputRows.map((row) => ({
-      inputRowData: row,
-      existingGoals,
-    })),
-    LEADS_COLUMNS
-  );
-}
diff --git a/src/pm-toolkit/src/domains/leads/extract-leads.ts b/src/pm-toolkit/src/domains/leads/extract-leads.ts
deleted file mode 100644
index 4434adc..0000000
--- a/src/pm-toolkit/src/domains/leads/extract-leads.ts
+++ /dev/null
@@ -1,71 +0,0 @@
-import { getColumnIndicesByLabels } from "../../utils/helpers";
-import { LeadsInputRow } from "./types";
-import { NR_LEADS_INPUT_TABLE } from "./constants";
-import { LEADS_KEYS, LEADS_LABELS } from "./constants";
-
-export function extractLeadsData(): LeadsInputRow[] {
-  const ss = SpreadsheetApp.getActiveSpreadsheet();
-  const range = ss.getRangeByName(NR_LEADS_INPUT_TABLE);
-  const values = range?.getValues() ?? [];
-
-  const [headerRow, ...dataRows] = values;
-  if (!headerRow) return [];
-
-  const normalizedHeader = headerRow.map((label) => label.trim());
-  const columnIndexByLabel = getColumnIndicesByLabels(normalizedHeader, [
-    LEADS_LABELS.YEAR,
-    LEADS_LABELS.MONTH,
-    LEADS_LABELS.TOTAL_LEADS,
-    LEADS_LABELS.SIGNED,
-    LEADS_LABELS.REVENUE,
-  ]);
-
-  return dataRows
-    .filter((row) => row[columnIndexByLabel[LEADS_LABELS.YEAR]] !== "")
-    .map((row) => ({
-      [LEADS_KEYS.YEAR]: Number(row[columnIndexByLabel[LEADS_LABELS.YEAR]]),
-      [LEADS_KEYS.MONTH]: Number(row[columnIndexByLabel[LEADS_LABELS.MONTH]]),
-      [LEADS_KEYS.TOTAL_LEADS]:
-        Number(row[columnIndexByLabel[LEADS_LABELS.TOTAL_LEADS]]) || 0,
-      [LEADS_KEYS.SIGNED]:
-        Number(row[columnIndexByLabel[LEADS_LABELS.SIGNED]]) || 0,
-      [LEADS_KEYS.REVENUE]:
-        Number(row[columnIndexByLabel[LEADS_LABELS.REVENUE]]) || 0,
-      [LEADS_KEYS.PROP_NOT_SENT]:
-        Number(row[columnIndexByLabel[LEADS_LABELS.PROP_NOT_SENT]]) || 0,
-    }));
-}
-
-export function extractMonthlyRevenueGoalsFromNamedRange(
-  namedRangeName: string
-): Map<string, number> {
-  const ss = SpreadsheetApp.getActiveSpreadsheet();
-  const range = ss.getRangeByName(namedRangeName);
-  if (!range) throw new Error(`Named range "${namedRangeName}" not found`);
-
-  const sheet = range.getSheet();
-  const numRows = range.getNumRows();
-  const numCols = range.getNumColumns();
-  if (numRows < 2) return new Map(); // must have at least header + one data row
-
-  const [headers, ...rows] = range.getValues();
-
-  const monthColIdx = headers.findIndex((val) => val === LEADS_LABELS.MONTH);
-  const goalColIdx = headers.findIndex(
-    (val) => val === LEADS_LABELS.REVENUE_GOAL
-  );
-
-  if (monthColIdx === -1 || goalColIdx === -1) return new Map();
-
-  const goals = new Map<string, number>();
-
-  for (const row of rows) {
-    const month = String(row[monthColIdx]);
-    const goal = row[goalColIdx];
-    if (month && typeof goal === "number" && !isNaN(goal)) {
-      goals.set(month, goal);
-    }
-  }
-
-  return goals;
-}
diff --git a/src/pm-toolkit/src/domains/leads/extract-payments.ts b/src/pm-toolkit/src/domains/leads/extract-payments.ts
deleted file mode 100644
index 54e5aa9..0000000
--- a/src/pm-toolkit/src/domains/leads/extract-payments.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import { PAYMENTS_INPUT_SHEET, PAYMENTS_INPUT_TABLE_ANCHOR } from "./constants";
-import { PaymentEntry } from "./types";
-
-export function extractPaymentsFromTable(): PaymentEntry[] {
-  const ss = SpreadsheetApp.getActiveSpreadsheet();
-  const sheet = ss.getSheetByName(PAYMENTS_INPUT_SHEET);
-  if (!sheet) throw new Error(`Sheet '${PAYMENTS_INPUT_SHEET}' not found`);
-
-  const tableRange = sheet
-    .getRange(PAYMENTS_INPUT_TABLE_ANCHOR)
-    .getDataRegion(SpreadsheetApp.Dimension.ROWS);
-  const values = tableRange.getValues();
-  const [headerRow, ...dataRows] = values;
-
-  // Build column name ‚Üí index map
-  const colIndexMap = new Map<string, number>();
-  headerRow.forEach((name, i) => {
-    colIndexMap.set(String(name).trim().toLowerCase(), i);
-  });
-
-  const get = (row: any[], name: string) =>
-    row[colIndexMap.get(name.toLowerCase()) ?? -1];
-
-  return dataRows
-    .filter(
-      (row) => get(row, "Date") instanceof Date && !isNaN(get(row, "Amount"))
-    )
-    .map((row) => ({
-      date: get(row, "Date") as Date,
-      amount: Number(get(row, "Amount")),
-      transaction: String(get(row, "Transaction")),
-    }));
-}
diff --git a/src/pm-toolkit/src/domains/leads/generate-dashboard.ts b/src/pm-toolkit/src/domains/leads/generate-dashboard.ts
index 3cd4872..a4c6567 100644
--- a/src/pm-toolkit/src/domains/leads/generate-dashboard.ts
+++ b/src/pm-toolkit/src/domains/leads/generate-dashboard.ts
@@ -1,39 +1,50 @@
-import {
-  extractLeadsData,
-  extractMonthlyRevenueGoalsFromNamedRange,
-} from "./extract-leads";
+import { extractLeadsData } from "./data-extraction";
 import { LeadsInputRow, QuarterDashboardRow } from "./types";
 import { LEADS_COLUMNS } from "./columns-months";
 import { generateAndStylizeTableFromRows } from "../../utils/table-builder";
 import {
   BLANK_SHEET_TEMPLATE,
-  LEADS_DASHBOARD_SHEET,
-  NR_LEADS_MONTHLY_DASHBOARD_TABLE,
-  NR_LEADS_MONTHLY_GOALS,
-  QUARTER_KEYS,
-  QUARTER_LABELS,
+  DASHBOARD_SHEET,
+  dashboardKeys,
+  inputKeys,
+  quarterlyKeys,
 } from "./constants";
 import { TEMPLATE_SPREADSHEET_ID } from "../../constants";
-import { createMonthlyDashboardRows } from "./data-months";
-import { LEADS_KEYS } from "./constants";
-import { applyQuarterBorders, applyQuarterColoring } from "./styles";
+import { createMonthlyDashboardRows } from "./data-transformation";
+import {
+  applyBorders,
+  applyQuarterBorders,
+  applyQuarterColoring,
+} from "./styles";
 import { getQuarterFromMonth } from "./utils";
-import { QUARTER_COLUMNS, QuarterColumnKey } from "./columns-quarters";
-import { TableInfo } from "../../types";
-import { setNamedRange } from "../../utils/helpers";
+import { QUARTER_COLUMNS } from "./columns-quarters";
+import { QuarterlyKey } from "./constants";
 
 const QUARTERS_ROW_SPAN = 3;
 const SHOW_DESCRIPTION = false;
+const stylizeOptionsMonths = {
+  zebra: false,
+  showDescription: SHOW_DESCRIPTION,
+  colorKeys: [dashboardKeys.REVENUE_DIFF],
+  columnWidths: {
+    [inputKeys.MONTH]: 73,
+  },
+};
+const stylizeOptionsQuarters = {
+  ...stylizeOptionsMonths,
+  rowSpan: QUARTERS_ROW_SPAN,
+  columnWidths: {
+    [quarterlyKeys.QUARTER]: 60,
+  },
+};
 
 export function generateLeadsDashboard() {
   const year = getYearFilter();
   const sheet = getOrCreateLeadsDashboardSheet();
-  const existingGoals = extractMonthlyRevenueGoalsFromNamedRange(
-    NR_LEADS_MONTHLY_GOALS
-  );
+
   sheet.clear();
   const inputRows: LeadsInputRow[] = extractLeadsData();
-  const monthlyRows = createMonthlyDashboardRows(inputRows, existingGoals);
+  const monthlyRows = createMonthlyDashboardRows(inputRows);
 
   const startingRow = createHeader(sheet, year, 1);
   const monthlyTableInfo = generateAndStylizeTableFromRows(
@@ -43,15 +54,21 @@ export function generateLeadsDashboard() {
     1,
     "üìà Leads ‚Äî Monthly Breakdown",
     LEADS_COLUMNS,
-    [LEADS_KEYS.REVENUE, LEADS_KEYS.TOTAL_LEADS, LEADS_KEYS.SIGNED],
-    { zebra: false, showDescription: SHOW_DESCRIPTION }
+    [inputKeys.REVENUE, inputKeys.TOTAL_LEADS, inputKeys.SIGNED],
+    stylizeOptionsMonths
   );
 
-  handleMonthlyGoalsNamedRange(sheet, monthlyTableInfo);
   applyQuarterColoring(sheet, monthlyTableInfo, LEADS_COLUMNS);
-  applyQuarterBorders(sheet, monthlyTableInfo, LEADS_COLUMNS, LEADS_KEYS.MONTH);
-
-  const quarterRows = createQuarterlyDashboardRows(inputRows);
+  // applyBorders(
+  //   sheet,
+  //   monthlyTableInfo.startRow,
+  //   monthlyTableInfo.endRow,
+  //   monthlyTableInfo.startCol,
+  //   monthlyTableInfo.endCol
+  // );
+  applyQuarterBorders(sheet, monthlyTableInfo, LEADS_COLUMNS, inputKeys.MONTH);
+
+  const quarterRows = createQuarterlyDashboardRows(inputRows, year);
   const quarterStartRow = monthlyTableInfo.startRow;
   const quarterStartCol = monthlyTableInfo.endCol + 1;
 
@@ -62,8 +79,8 @@ export function generateLeadsDashboard() {
     quarterStartCol,
     "üìà Leads ‚Äî Quarterly Breakdown",
     QUARTER_COLUMNS,
-    [QUARTER_KEYS.REVENUE, QUARTER_KEYS.TOTAL_LEADS, QUARTER_KEYS.SIGNED],
-    { zebra: false, showDescription: false, rowSpan: QUARTERS_ROW_SPAN }
+    [quarterlyKeys.REVENUE, quarterlyKeys.TOTAL_LEADS, quarterlyKeys.SIGNED],
+    stylizeOptionsQuarters
   );
 
   applyQuarterColoring(
@@ -76,14 +93,14 @@ export function generateLeadsDashboard() {
     sheet,
     quarterTableInfo,
     QUARTER_COLUMNS,
-    QUARTER_KEYS.QUARTER,
+    quarterlyKeys.QUARTER,
     QUARTERS_ROW_SPAN
   );
 }
 
 function getOrCreateLeadsDashboardSheet(): GoogleAppsScript.Spreadsheet.Sheet {
   const ss = SpreadsheetApp.getActiveSpreadsheet();
-  const existing = ss.getSheetByName(LEADS_DASHBOARD_SHEET);
+  const existing = ss.getSheetByName(DASHBOARD_SHEET);
   if (existing) return existing;
 
   const templateFile = SpreadsheetApp.openById(TEMPLATE_SPREADSHEET_ID);
@@ -91,20 +108,20 @@ function getOrCreateLeadsDashboardSheet(): GoogleAppsScript.Spreadsheet.Sheet {
   if (!templateSheet) throw new Error("Template sheet not found.");
 
   const copiedSheet = templateSheet.copyTo(ss);
-  copiedSheet.setName(LEADS_DASHBOARD_SHEET);
+  copiedSheet.setName(DASHBOARD_SHEET);
   ss.setActiveSheet(copiedSheet);
   return copiedSheet;
 }
 
 export function createQuarterlyDashboardRows(
-  inputRows: LeadsInputRow[]
+  inputRows: LeadsInputRow[],
+  year: number
 ): QuarterDashboardRow[] {
   type QuarterKey = `${number}-Q${number}`;
   const grouped = new Map<QuarterKey, LeadsInputRow[]>();
 
   for (const row of inputRows) {
-    const year = row[LEADS_KEYS.YEAR];
-    const quarter = getQuarterFromMonth(Number(row[LEADS_KEYS.MONTH]));
+    const quarter = getQuarterFromMonth(Number(row[inputKeys.MONTH]));
     const key = `${year}-Q${quarter}` as QuarterKey;
 
     if (!grouped.has(key)) grouped.set(key, []);
@@ -116,23 +133,22 @@ export function createQuarterlyDashboardRows(
     const year = Number(yearStr);
     const quarter = `Q${qStr}`;
 
-    const totalLeads = sum(group, LEADS_KEYS.TOTAL_LEADS);
-    const signed = sum(group, LEADS_KEYS.SIGNED);
-    const revenue = sum(group, LEADS_KEYS.REVENUE);
+    const totalLeads = sum(group, inputKeys.TOTAL_LEADS);
+    const signed = sum(group, inputKeys.SIGNED);
     const conversionRate = totalLeads > 0 ? signed / totalLeads : 0;
-
-    const goal = "";
-    const diff = typeof goal === "number" ? revenue - goal : "";
-
-    const fullRow: Partial<Record<QuarterColumnKey, string | number>> = {
-      [QUARTER_KEYS.YEAR]: year,
-      [QUARTER_KEYS.QUARTER]: quarter,
-      [QUARTER_KEYS.TOTAL_LEADS]: totalLeads,
-      [QUARTER_KEYS.SIGNED]: signed,
-      [QUARTER_KEYS.REVENUE]: revenue,
-      [QUARTER_KEYS.CONVERSION_RATE]: conversionRate,
-      [QUARTER_KEYS.REVENUE_GOAL]: goal,
-      [QUARTER_KEYS.REVENUE_DIFF]: diff,
+    const revenue = sum(group, inputKeys.REVENUE);
+    const goal = sum(group, inputKeys.REVENUE_GOAL);
+    const diff = goal - revenue;
+
+    const fullRow: Partial<Record<QuarterlyKey, string | number>> = {
+      [quarterlyKeys.YEAR]: year,
+      [quarterlyKeys.QUARTER]: quarter,
+      [quarterlyKeys.TOTAL_LEADS]: totalLeads,
+      [quarterlyKeys.SIGNED]: signed,
+      [quarterlyKeys.REVENUE]: revenue,
+      [quarterlyKeys.CONVERSION_RATE]: conversionRate,
+      [quarterlyKeys.REVENUE_GOAL]: goal,
+      [quarterlyKeys.REVENUE_DIFF]: diff,
     };
 
     const filtered = Object.fromEntries(
@@ -143,12 +159,12 @@ export function createQuarterlyDashboardRows(
   });
 
   return unsortedRows.sort((a, b) => {
-    const yA = Number(a[QUARTER_KEYS.YEAR]);
-    const yB = Number(b[QUARTER_KEYS.YEAR]);
+    const yA = Number(a[quarterlyKeys.YEAR]);
+    const yB = Number(b[quarterlyKeys.YEAR]);
     if (yA !== yB) return yA - yB;
 
-    const qA = Number(String(a[QUARTER_KEYS.QUARTER]).slice(1));
-    const qB = Number(String(b[QUARTER_KEYS.QUARTER]).slice(1));
+    const qA = Number(String(a[quarterlyKeys.QUARTER]).slice(1));
+    const qB = Number(String(b[quarterlyKeys.QUARTER]).slice(1));
     return qA - qB;
   });
 }
@@ -160,44 +176,6 @@ function sum<K extends keyof LeadsInputRow>(
   return rows.reduce((acc, r) => acc + Number(r[key] || 0), 0);
 }
 
-function extractExistingRevenueGoals(
-  sheet: GoogleAppsScript.Spreadsheet.Sheet
-): Map<string, number> {
-  const goals = new Map<string, number>();
-  const headers = sheet.getRange(2, 1, 1, sheet.getLastColumn()).getValues()[0];
-
-  const yearColIdx = headers.findIndex((val) => val === QUARTER_LABELS.YEAR);
-  const quarterColIdx = headers.findIndex(
-    (val) => val === QUARTER_LABELS.QUARTER
-  );
-  const goalColIdx = headers.findIndex(
-    (val) => val === QUARTER_LABELS.REVENUE_GOAL
-  );
-
-  if (yearColIdx === -1 || quarterColIdx === -1 || goalColIdx === -1)
-    return goals;
-
-  const dataRange = sheet.getRange(
-    3,
-    1,
-    sheet.getLastRow() - 2,
-    sheet.getLastColumn()
-  );
-  const values = dataRange.getValues();
-
-  for (const row of values) {
-    const year = row[yearColIdx];
-    const quarter = row[quarterColIdx];
-    const goal = row[goalColIdx];
-
-    if (year && quarter && typeof goal === "number" && !isNaN(goal)) {
-      goals.set(`${year}-${quarter}`, goal);
-    }
-  }
-
-  return goals;
-}
-
 function getYearFilter(): number {
   return 2025;
 }
@@ -223,26 +201,3 @@ function createHeader(
   // Return the row after the header (row 3)
   return 3;
 }
-
-export function handleMonthlyGoalsNamedRange(
-  sheet: GoogleAppsScript.Spreadsheet.Sheet,
-  monthlyTableInfo: TableInfo
-) {
-  if (!sheet) throw new Error("Leads dashboard sheet not found.");
-
-  const goalColOffset = LEADS_COLUMNS.findIndex(
-    (col) => col.key === LEADS_KEYS.REVENUE_GOAL
-  );
-
-  if (goalColOffset === -1)
-    throw new Error("Revenue Goal column not found in LEADS_COLUMNS");
-
-  const goalRange = sheet.getRange(
-    monthlyTableInfo.dataStartRow,
-    monthlyTableInfo.startCol + goalColOffset,
-    monthlyTableInfo.dataEndRow - monthlyTableInfo.dataStartRow + 1,
-    1
-  );
-
-  setNamedRange(sheet, NR_LEADS_MONTHLY_GOALS, goalRange);
-}
diff --git a/src/pm-toolkit/src/domains/leads/styles.ts b/src/pm-toolkit/src/domains/leads/styles.ts
index bdd920d..1247096 100644
--- a/src/pm-toolkit/src/domains/leads/styles.ts
+++ b/src/pm-toolkit/src/domains/leads/styles.ts
@@ -1,9 +1,8 @@
 import {
   QUARTER_COLORS,
   QUARTER_TO_MONTHS,
-  LEADS_LABELS,
-  QUARTER_KEYS,
-  QUARTER_LABELS,
+  quarterlyKeys,
+  quarterlyLabels,
 } from "./constants";
 import { TableInfo } from "../../types";
 import { BaseColumn } from "../../columns";
@@ -43,7 +42,9 @@ export function applyQuarterColoring(
   const isMonthly = rowSpan === 1;
 
   const targetColIndex = columns.findIndex((c) =>
-    isMonthly ? c.label === LEADS_LABELS.MONTH : c.key === QUARTER_KEYS.QUARTER
+    isMonthly
+      ? c.label === quarterlyLabels.MONTH
+      : c.key === quarterlyKeys.QUARTER
   );
   if (targetColIndex === -1) return;
 
@@ -78,50 +79,119 @@ export function applyQuarterBorders<T extends string>(
   sheet: GoogleAppsScript.Spreadsheet.Sheet,
   table: TableInfo,
   columns: BaseColumn<any, any, any>[],
-  monthKey: T,
+  groupKeyField: T,
   rowSpan = 1
 ) {
   const isMonthly = rowSpan === 1;
 
   const targetColIndex = columns.findIndex((c) =>
-    isMonthly ? c.key === monthKey : c.key === QUARTER_KEYS.QUARTER
+    isMonthly ? c.key === groupKeyField : c.key === quarterlyKeys.QUARTER
   );
   if (targetColIndex === -1) return;
 
+  const startRow = table.dataStartRow;
   const rowCount = table.dataEndRow - table.dataStartRow + 1;
   const colCount = columns.length;
-  const startRow = table.dataStartRow;
 
   const rawValues = sheet
     .getRange(startRow, table.startCol + targetColIndex, rowCount, 1)
     .getValues()
-    .map((r) => r[0]);
+    .map((r) => String(r[0]));
 
   const groupMap: Record<string, number[]> = {};
 
   for (let i = 0; i < rawValues.length; i++) {
-    const raw = String(rawValues[i]);
+    const raw = rawValues[i];
+
     const groupKey = isMonthly
-      ? MONTH_NUM_TO_QUARTER[MONTH_NAME_TO_NUMBER[raw] ?? -1] ?? "Other"
+      ? MONTH_NUM_TO_QUARTER[MONTH_NAME_TO_NUMBER[raw] ?? -1]
       : raw;
 
+    if (!groupKey) continue; // Skip ungrouped/malformed entries
+
     if (!groupMap[groupKey]) groupMap[groupKey] = [];
     groupMap[groupKey].push(i);
   }
 
+  // Draw thick outer box around each group ‚Äî do not touch inner borders
   Object.values(groupMap).forEach((rowIndices) => {
     if (rowIndices.length === 0) return;
-    const start = startRow + rowIndices[0];
-    const end = startRow + rowIndices[rowIndices.length - 1];
-    sheet.getRange(start, table.startCol, end - start + 1, colCount).setBorder(
+
+    const rowStart = startRow + rowIndices[0];
+    const rowEnd = startRow + rowIndices[rowIndices.length - 1];
+
+    sheet
+      .getRange(rowStart, table.startCol, rowEnd - rowStart + 1, colCount)
+      .setBorder(
+        true, // top
+        true, // left
+        true, // bottom
+        true, // right
+        false, // inner horizontal
+        false, // inner vertical
+        "black",
+        SpreadsheetApp.BorderStyle.SOLID_MEDIUM
+      );
+  });
+}
+
+export function applyBorders(
+  sheet: GoogleAppsScript.Spreadsheet.Sheet,
+  startRow: number,
+  numRows: number,
+  startCol: number,
+  numCols: number,
+  rowSpan: number = 1
+) {
+  const outerBorderStyle = SpreadsheetApp.BorderStyle.SOLID_MEDIUM;
+  const innerBorderStyle = SpreadsheetApp.BorderStyle.SOLID;
+  const lightGray = "#cccccc";
+
+  for (let r = 0; r < numRows; r += rowSpan) {
+    const range = sheet.getRange(startRow + r, startCol, rowSpan, numCols);
+
+    // Outer border
+    range.setBorder(
       true, // top
       true, // left
       true, // bottom
       true, // right
-      false,
-      false,
+      false, // innerHorizontal
+      false, // innerVertical
       "black",
-      SpreadsheetApp.BorderStyle.SOLID_MEDIUM
+      outerBorderStyle
     );
-  });
+
+    // Inner vertical borders
+    for (let c = 1; c < numCols; c++) {
+      const colRange = sheet.getRange(startRow + r, startCol + c, rowSpan, 1);
+      colRange.setBorder(
+        false,
+        true, // left
+        false,
+        false,
+        false,
+        false,
+        lightGray,
+        innerBorderStyle
+      );
+    }
+
+    // Optional: inner horizontal borders if you want light rows
+    // (Remove or comment if not wanted for monthly table)
+    for (let i = 1; i < rowSpan; i++) {
+      const row = startRow + r + i;
+      const rowRange = sheet.getRange(row, startCol, 1, numCols);
+      rowRange.setBorder(
+        true, // top
+        false,
+        false,
+        false,
+        false,
+        false,
+        lightGray,
+        innerBorderStyle
+      );
+    }
+  }
 }
diff --git a/src/pm-toolkit/src/domains/leads/types.ts b/src/pm-toolkit/src/domains/leads/types.ts
index 13b1aef..2d1e778 100644
--- a/src/pm-toolkit/src/domains/leads/types.ts
+++ b/src/pm-toolkit/src/domains/leads/types.ts
@@ -1,52 +1,38 @@
+import { InputKey, QuarterlyKey, QuarterlyLabel } from "./constants";
 import { BaseColumn } from "../../columns";
-import { LeadsColumnKey, LeadsColumnLabel } from "./columns-months";
-import { LEADS_KEYS } from "./constants";
-import { QuarterColumnKey, QuarterColumnLabel } from "./columns-quarters";
-
-export type PaymentEntry = {
-  date: Date;
-  amount: number;
-  transaction: string;
-};
-
-// export type LeadsInputRow = {
-//   year: number;
-//   month: number;
-//   totalLeads: number;
-//   signedProposals: number;
-//   approvedRevenue: number;
-// };
+import { DashboardKey, DashboardLabel } from "./constants";
 
 export type LeadsInputRow = {
-  [LEADS_KEYS.YEAR]: number;
-  [LEADS_KEYS.MONTH]: number;
-  [LEADS_KEYS.TOTAL_LEADS]: number;
-  [LEADS_KEYS.SIGNED]: number;
-  [LEADS_KEYS.REVENUE]: number;
-  [LEADS_KEYS.PROP_NOT_SENT]: number;
+  [K in InputKey]: number;
 };
 
-export type LeadsDashboardRow = Record<LeadsColumnKey, number | string>;
+// Full dashboard row (input + derived)
+export type LeadsDashboardRow = {
+  [K in DashboardKey]: number | string;
+};
 
+// Aggregated quarterly row
 export type QuarterDashboardRow = Record<string, string | number>;
 
+// Context passed into valueFn() for each column
 export interface LeadsRowContext {
   inputRowData: LeadsInputRow;
-  existingGoals: Map<string, number>;
 }
 
 export interface QuarterRowContext {
   inputRowData: QuarterDashboardRow;
 }
 
+// Column metadata for monthly dashboard
 export type LeadsColumn = BaseColumn<
   LeadsRowContext,
-  LeadsColumnKey,
-  LeadsColumnLabel
+  DashboardKey,
+  DashboardLabel
 >;
 
+// Column metadata for quarterly dashboard
 export type LeadsQuarterColumn = BaseColumn<
   QuarterRowContext,
-  QuarterColumnKey,
-  QuarterColumnLabel
+  QuarterlyKey,
+  QuarterlyLabel
 >;
diff --git a/src/pm-toolkit/src/domains/projects/dashboard/index.ts b/src/pm-toolkit/src/domains/projects/dashboard/index.ts
index 57e334f..632a0d1 100644
--- a/src/pm-toolkit/src/domains/projects/dashboard/index.ts
+++ b/src/pm-toolkit/src/domains/projects/dashboard/index.ts
@@ -2,4 +2,3 @@ export * from "./transform-functions";
 export * from "./utils";
 export * from "./columns";
 export * from "./generate-dashboard";
-export * from "./project-data";
diff --git a/src/pm-toolkit/src/styles/stylize-dashboard.ts b/src/pm-toolkit/src/styles/stylize-dashboard.ts
index 2c6291c..7ee23ca 100644
--- a/src/pm-toolkit/src/styles/stylize-dashboard.ts
+++ b/src/pm-toolkit/src/styles/stylize-dashboard.ts
@@ -77,7 +77,7 @@ export function stylizeTable<T extends string>(
   );
   applyBorders(sheet, headerRow, startCol, totalTableRows, columns);
   applyAlignment(table, sheet, columns);
-  resizeColumns(sheet, startCol, columns);
+  resizeColumns(sheet, startCol, columns, options.columnWidths);
 
   if (summaryRow !== undefined) {
     applySummaryRowStyle(sheet, summaryRow, startCol, columns);
diff --git a/src/pm-toolkit/src/styles/table.ts b/src/pm-toolkit/src/styles/table.ts
index b3426b4..22eba89 100644
--- a/src/pm-toolkit/src/styles/table.ts
+++ b/src/pm-toolkit/src/styles/table.ts
@@ -1,4 +1,6 @@
 import { BaseColumn } from "../columns";
+import { COLUMN_PADDING } from "../constants";
+import { StylizeOptions } from "../types";
 import { TableInfo } from "./stylize-dashboard";
 
 export function applyTitleStyle(
@@ -118,12 +120,19 @@ export function resizeColumns(
   sheet: GoogleAppsScript.Spreadsheet.Sheet,
   startCol: number,
   columns: BaseColumn<any, any, any>[],
-  customWidths: Partial<Record<string, number>> = {}
+  customWidths?: StylizeOptions["columnWidths"]
 ) {
   columns.forEach((column, i) => {
     const col = startCol + i;
-    const width = customWidths[column.key] ?? 136;
-    sheet.setColumnWidth(col, width);
+    const customWidth = customWidths?.[column.key as keyof typeof customWidths];
+
+    if (typeof customWidth === "number") {
+      sheet.setColumnWidth(col, customWidth);
+    } else {
+      sheet.autoResizeColumn(col);
+      const currentWidth = sheet.getColumnWidth(col);
+      sheet.setColumnWidth(col, currentWidth + COLUMN_PADDING);
+    }
   });
 }
 
diff --git a/src/pm-toolkit/src/types.ts b/src/pm-toolkit/src/types.ts
index 79a8a2b..551e213 100644
--- a/src/pm-toolkit/src/types.ts
+++ b/src/pm-toolkit/src/types.ts
@@ -7,6 +7,7 @@ export type StylizeOptions<T extends string = string> = {
     sheet: GoogleAppsScript.Spreadsheet.Sheet,
     table: TableInfo
   ) => void)[];
+  columnWidths?: Partial<Record<string, number>>;
 };
 
 export type TableInfo = {
diff --git a/src/pm-toolkit/src/utils/helpers.ts b/src/pm-toolkit/src/utils/helpers.ts
index fa7d180..78d68d9 100644
--- a/src/pm-toolkit/src/utils/helpers.ts
+++ b/src/pm-toolkit/src/utils/helpers.ts
@@ -64,14 +64,13 @@ export function toA1Notation(col: number, row: number): string {
 // üìÅ src/utils/mapInputToDashboardRows.ts
 
 export function mapInputToDashboardRows<
-  TContext extends { rowData: any },
+  TContext,
   TDashboardRow extends Record<string, unknown>
 >(
-  inputRows: TContext["rowData"][],
+  contexts: TContext[],
   columns: BaseColumn<TContext, keyof TDashboardRow & string, string>[]
 ): TDashboardRow[] {
-  return inputRows.map((input) => {
-    const ctx = { rowData: input } as TContext;
+  return contexts.map((ctx) => {
     const result: Partial<TDashboardRow> = {};
 
     for (const col of columns) {
